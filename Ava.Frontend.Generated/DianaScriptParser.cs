//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Ava.Frontend.Generated/DianaScript.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Ava.Frontend {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class DianaScriptParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, COMMENT_1=34, SINGLE_BINOP_2=35, STR_4=36, INT_10=37, 
		HEX_7=38, OCT_8=39, BIN_9=40, FLOAT_11=41, NAME_13=42, WS_INLINE_14=43, 
		NEWLINE_17=44;
	public const int
		RULE_stmt = 0, RULE_gen__filter_option__NEWLINE = 1, RULE_option = 2, 
		RULE_gen__nullable_gen__seplist__L44__expr = 3, RULE_gen__seplist__L44__expr = 4, 
		RULE_atom = 5, RULE_gen__line_wrap_expr = 6, RULE_gen__optional_NEWLINE = 7, 
		RULE_gen__nullable_gen__seplist__L44__name = 8, RULE_gen__seplist__L44__name = 9, 
		RULE_gen__optional_gen__blockOf_else = 10, RULE_gen__blockOf_else = 11, 
		RULE_gen__nullable_gen__list_gen__snd_elif__elifBlock = 12, RULE_gen__list_gen__snd_elif__elifBlock = 13, 
		RULE_gen__snd_elif__elifBlock = 14, RULE_gen__closelist__L44__pair = 15, 
		RULE_gen___closelist__L44__pair = 16, RULE_gen__closelist__L44__expr = 17, 
		RULE_gen___closelist__L44__expr = 18, RULE_pair = 19, RULE_gen__line_wrap__L58 = 20, 
		RULE_trailer = 21, RULE_bin = 22, RULE_binseq = 23, RULE_ibin = 24, RULE_ibinop = 25, 
		RULE_binop = 26, RULE_not = 27, RULE_and_expr = 28, RULE_or_expr = 29, 
		RULE_expr = 30, RULE_gen__seplist_gen__line_wrap__L124_L62__or_expr = 31, 
		RULE_gen__line_wrap__L124_L62 = 32, RULE_block = 33, RULE_gen__filter_stmt__gen__or___L59__NEWLINE = 34, 
		RULE_gen__or___L59__NEWLINE = 35, RULE_lhs = 36, RULE_do = 37, RULE_then = 38, 
		RULE_gen__blockOf_do = 39, RULE_name = 40, RULE_elifBlock = 41, RULE_gen__blockOf_then = 42, 
		RULE_lhs_seq = 43, RULE_start = 44, RULE_gen__nullable_gen__seplist_NEWLINE__stmt = 45, 
		RULE_gen__seplist_NEWLINE__stmt = 46;
	public static readonly string[] ruleNames = {
		"stmt", "gen__filter_option__NEWLINE", "option", "gen__nullable_gen__seplist__L44__expr", 
		"gen__seplist__L44__expr", "atom", "gen__line_wrap_expr", "gen__optional_NEWLINE", 
		"gen__nullable_gen__seplist__L44__name", "gen__seplist__L44__name", "gen__optional_gen__blockOf_else", 
		"gen__blockOf_else", "gen__nullable_gen__list_gen__snd_elif__elifBlock", 
		"gen__list_gen__snd_elif__elifBlock", "gen__snd_elif__elifBlock", "gen__closelist__L44__pair", 
		"gen___closelist__L44__pair", "gen__closelist__L44__expr", "gen___closelist__L44__expr", 
		"pair", "gen__line_wrap__L58", "trailer", "bin", "binseq", "ibin", "ibinop", 
		"binop", "not", "and_expr", "or_expr", "expr", "gen__seplist_gen__line_wrap__L124_L62__or_expr", 
		"gen__line_wrap__L124_L62", "block", "gen__filter_stmt__gen__or___L59__NEWLINE", 
		"gen__or___L59__NEWLINE", "lhs", "do", "then", "gen__blockOf_do", "name", 
		"elifBlock", "gen__blockOf_then", "lhs_seq", "start", "gen__nullable_gen__seplist_NEWLINE__stmt", 
		"gen__seplist_NEWLINE__stmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'let'", "'='", "'loop'", "'end'", "'for'", "'in'", 
		"'break'", "'continue'", "'return'", "'do'", "','", "'.'", "'['", "']'", 
		"'('", "')'", "'None'", "'-'", "'~'", "'if'", "'fun'", "'->'", "'else'", 
		"'elif'", "':'", "'not'", "'and'", "'or'", "'|>'", "';'", "'then'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "COMMENT_1", 
		"SINGLE_BINOP_2", "STR_4", "INT_10", "HEX_7", "OCT_8", "BIN_9", "FLOAT_11", 
		"NAME_13", "WS_INLINE_14", "NEWLINE_17"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DianaScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DianaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DianaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DianaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StmtContext : ParserRuleContext {
		public ImmediateAST result;
		public IToken local__1_stmt_case0;
		public Gen__filter_option__NEWLINEContext local__3_stmt_case0;
		public IToken local__1_stmt_case1;
		public IToken local__2_stmt_case1;
		public ExprContext local__4_stmt_case1;
		public Lhs_seqContext local__1_stmt_case2;
		public ExprContext local__2_stmt_case2;
		public IToken local__1_stmt_case3;
		public BlockContext local__2_stmt_case3;
		public IToken local__1_stmt_case4;
		public IToken local__2_stmt_case4;
		public ExprContext local__4_stmt_case4;
		public Gen__blockOf_doContext local__5_stmt_case4;
		public IToken local__1_stmt_case5;
		public IToken local__1_stmt_case6;
		public IToken local__1_stmt_case7;
		public ExprContext local__2_stmt_case7;
		public IToken local__1_stmt_case8;
		public IbinContext local__1_stmt_case9;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_13() { return GetToken(DianaScriptParser.NAME_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen__filter_option__NEWLINEContext gen__filter_option__NEWLINE() {
			return GetRuleContext<Gen__filter_option__NEWLINEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Lhs_seqContext lhs_seq() {
			return GetRuleContext<Lhs_seqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__blockOf_doContext gen__blockOf_do() {
			return GetRuleContext<Gen__blockOf_doContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IbinContext ibin() {
			return GetRuleContext<IbinContext>(0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitStmt(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(Context, State);
		EnterRule(_localctx, 0, RULE_stmt);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; _localctx.local__1_stmt_case0 = Match(NAME_13);
				State = 95; Match(T__0);
				State = 96; _localctx.local__3_stmt_case0 = gen__filter_option__NEWLINE(0);
				State = 97; Match(T__1);
				 
				        ImmediateAST tmp__6 ; 
				        System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__5 ; 
				        ImmediateAST tmp__4 ; 
				        CommonToken tmp__3 ; 
				        CommonToken tmp__2 ; 
				        CommonToken tmp__1 ; 
				        tmp__1 = ( CommonToken ) _localctx.local__1_stmt_case0 ; 
				        tmp__2 = ( CommonToken ) _localctx.local__1_stmt_case0 ; 
				        tmp__3 = ( CommonToken ) _localctx.local__1_stmt_case0 ; 
				        tmp__4 = (ImmediateAST) mkVar( tmp__2, tmp__3.Text ); 
				        tmp__5 = ( System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> ) _localctx.local__3_stmt_case0.result ; 
				        tmp__6 = (ImmediateAST) mkWorkflow( tmp__1, tmp__4, tmp__5 ); 
				        _localctx.result =  tmp__6; 
				      
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 100; _localctx.local__1_stmt_case1 = Match(T__2);
				State = 101; _localctx.local__2_stmt_case1 = Match(NAME_13);
				State = 102; Match(T__3);
				State = 103; _localctx.local__4_stmt_case1 = expr();
				 
				        ImmediateAST tmp__10 ; 
				        ImmediateAST tmp__9 ; 
				        CommonToken tmp__8 ; 
				        CommonToken tmp__7 ; 
				        tmp__7 = ( CommonToken ) _localctx.local__1_stmt_case1 ; 
				        tmp__8 = ( CommonToken ) _localctx.local__2_stmt_case1 ; 
				        tmp__9 = ( ImmediateAST ) _localctx.local__4_stmt_case1.result ; 
				        tmp__10 = (ImmediateAST) mkLet( tmp__7, tmp__8.Text, tmp__9 ); 
				        _localctx.result =  tmp__10; 
				      
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; _localctx.local__1_stmt_case2 = lhs_seq(0);
				State = 107; _localctx.local__2_stmt_case2 = expr();
				 
				        ImmediateAST tmp__13 ; 
				        ImmediateAST tmp__12 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__11 ; 
				        tmp__11 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_stmt_case2.result ; 
				        tmp__12 = ( ImmediateAST ) _localctx.local__2_stmt_case2.result ; 
				        tmp__13 = (ImmediateAST) mkStoreMany( tmp__11, tmp__12 ); 
				        _localctx.result =  tmp__13; 
				      
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110; _localctx.local__1_stmt_case3 = Match(T__4);
				State = 111; _localctx.local__2_stmt_case3 = block();
				State = 112; Match(T__5);
				 
				        ImmediateAST tmp__18 ; 
				        ImmediateAST tmp__17 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__16 ; 
				        CommonToken tmp__15 ; 
				        CommonToken tmp__14 ; 
				        tmp__14 = ( CommonToken ) _localctx.local__1_stmt_case3 ; 
				        tmp__15 = ( CommonToken ) _localctx.local__1_stmt_case3 ; 
				        tmp__16 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_stmt_case3.result ; 
				        tmp__17 = (ImmediateAST) mkBlock( tmp__15, tmp__16 ); 
				        tmp__18 = (ImmediateAST) mkLoop( tmp__14, tmp__17 ); 
				        _localctx.result =  tmp__18; 
				      
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115; _localctx.local__1_stmt_case4 = Match(T__6);
				State = 116; _localctx.local__2_stmt_case4 = Match(NAME_13);
				State = 117; Match(T__7);
				State = 118; _localctx.local__4_stmt_case4 = expr();
				State = 119; _localctx.local__5_stmt_case4 = gen__blockOf_do();
				State = 120; Match(T__5);
				 
				        ImmediateAST tmp__23 ; 
				        ImmediateAST tmp__22 ; 
				        ImmediateAST tmp__21 ; 
				        CommonToken tmp__20 ; 
				        CommonToken tmp__19 ; 
				        tmp__19 = ( CommonToken ) _localctx.local__1_stmt_case4 ; 
				        tmp__20 = ( CommonToken ) _localctx.local__2_stmt_case4 ; 
				        tmp__21 = ( ImmediateAST ) _localctx.local__4_stmt_case4.result ; 
				        tmp__22 = ( ImmediateAST ) _localctx.local__5_stmt_case4.result ; 
				        tmp__23 = (ImmediateAST) mkFor( tmp__19, tmp__20.Text, tmp__21, tmp__22 ); 
				        _localctx.result =  tmp__23; 
				      
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123; _localctx.local__1_stmt_case5 = Match(T__8);
				 
				        ImmediateAST tmp__25 ; 
				        CommonToken tmp__24 ; 
				        tmp__24 = ( CommonToken ) _localctx.local__1_stmt_case5 ; 
				        tmp__25 = (ImmediateAST) mkBreak( tmp__24 ); 
				        _localctx.result =  tmp__25; 
				      
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 125; _localctx.local__1_stmt_case6 = Match(T__9);
				 
				        ImmediateAST tmp__27 ; 
				        CommonToken tmp__26 ; 
				        tmp__26 = ( CommonToken ) _localctx.local__1_stmt_case6 ; 
				        tmp__27 = (ImmediateAST) mkContinue( tmp__26 ); 
				        _localctx.result =  tmp__27; 
				      
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 127; _localctx.local__1_stmt_case7 = Match(T__10);
				State = 128; _localctx.local__2_stmt_case7 = expr();
				 
				        ImmediateAST tmp__30 ; 
				        ImmediateAST tmp__29 ; 
				        CommonToken tmp__28 ; 
				        tmp__28 = ( CommonToken ) _localctx.local__1_stmt_case7 ; 
				        tmp__29 = ( ImmediateAST ) _localctx.local__2_stmt_case7.result ; 
				        tmp__30 = (ImmediateAST) mkReturn( tmp__28, tmp__29 ); 
				        _localctx.result =  tmp__30; 
				      
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 131; _localctx.local__1_stmt_case8 = Match(T__10);
				 
				        ImmediateAST tmp__32 ; 
				        CommonToken tmp__31 ; 
				        tmp__31 = ( CommonToken ) _localctx.local__1_stmt_case8 ; 
				        tmp__32 = (ImmediateAST) mkReturn( tmp__31, null ); 
				        _localctx.result =  tmp__32; 
				      
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 133; _localctx.local__1_stmt_case9 = ibin();
				 
				        ImmediateAST tmp__33 ; 
				        tmp__33 = ( ImmediateAST ) _localctx.local__1_stmt_case9.result ; 
				        _localctx.result =  tmp__33; 
				      
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__filter_option__NEWLINEContext : ParserRuleContext {
		public System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> result;
		public Gen__filter_option__NEWLINEContext local__1_gen__filter_option__NEWLINE_case0;
		public Gen__filter_option__NEWLINEContext local__1_gen__filter_option__NEWLINE_case1;
		public OptionContext local__1_gen__filter_option__NEWLINE_case2;
		public OptionContext local__2_gen__filter_option__NEWLINE_case0;
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE_17() { return GetToken(DianaScriptParser.NEWLINE_17, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen__filter_option__NEWLINEContext gen__filter_option__NEWLINE() {
			return GetRuleContext<Gen__filter_option__NEWLINEContext>(0);
		}
		public Gen__filter_option__NEWLINEContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__filter_option__NEWLINE; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__filter_option__NEWLINE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__filter_option__NEWLINE(this);
		}
	}

	[RuleVersion(0)]
	public Gen__filter_option__NEWLINEContext gen__filter_option__NEWLINE() {
		return gen__filter_option__NEWLINE(0);
	}

	private Gen__filter_option__NEWLINEContext gen__filter_option__NEWLINE(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__filter_option__NEWLINEContext _localctx = new Gen__filter_option__NEWLINEContext(Context, _parentState);
		Gen__filter_option__NEWLINEContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_gen__filter_option__NEWLINE, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
			case NAME_13:
				{
				State = 139; _localctx.local__1_gen__filter_option__NEWLINE_case2 = option();
				 
				        System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__40 ; 
				        (int, int, string, System.Collections.Generic.List<ImmediateAST>) tmp__39 ; 
				        System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__38 ; 
				        tmp__38 = (System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>) empty<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>(  ); 
				        tmp__39 = ( (int, int, string, System.Collections.Generic.List<ImmediateAST>) ) _localctx.local__1_gen__filter_option__NEWLINE_case2.result ; 
				        tmp__40 = (System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>) append<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>( tmp__38, tmp__39 ); 
				        _localctx.result =  tmp__40; 
				      
				}
				break;
			case NEWLINE_17:
				{
				State = 142; Match(NEWLINE_17);
				 
				        System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__41 ; 
				        tmp__41 = (System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>) empty<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>(  ); 
				        _localctx.result =  tmp__41; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 155;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 153;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new Gen__filter_option__NEWLINEContext(_parentctx, _parentState);
						_localctx.local__1_gen__filter_option__NEWLINE_case0 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen__filter_option__NEWLINE);
						State = 146;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 147; _localctx.local__2_gen__filter_option__NEWLINE_case0 = option();
						 
						                  System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__36 ; 
						                  (int, int, string, System.Collections.Generic.List<ImmediateAST>) tmp__35 ; 
						                  System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__34 ; 
						                  tmp__34 = ( System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> ) _localctx.local__1_gen__filter_option__NEWLINE_case0.result ; 
						                  tmp__35 = ( (int, int, string, System.Collections.Generic.List<ImmediateAST>) ) _localctx.local__2_gen__filter_option__NEWLINE_case0.result ; 
						                  tmp__36 = (System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>) append<(int, int, string, System.Collections.Generic.List<ImmediateAST>)>( tmp__34, tmp__35 ); 
						                  _localctx.result =  tmp__36; 
						                
						}
						break;
					case 2:
						{
						_localctx = new Gen__filter_option__NEWLINEContext(_parentctx, _parentState);
						_localctx.local__1_gen__filter_option__NEWLINE_case1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen__filter_option__NEWLINE);
						State = 150;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 151; Match(NEWLINE_17);
						 
						                  System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> tmp__37 ; 
						                  tmp__37 = ( System.Collections.Generic.List<(int, int, string, System.Collections.Generic.List<ImmediateAST>)> ) _localctx.local__1_gen__filter_option__NEWLINE_case1.result ; 
						                  _localctx.result =  tmp__37; 
						                
						}
						break;
					}
					} 
				}
				State = 157;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		public (int, int, string, System.Collections.Generic.List<ImmediateAST>) result;
		public IToken local__1_option_case0;
		public Gen__nullable_gen__seplist__L44__exprContext local__2_option_case0;
		public ExprContext local__2_option_case1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_13() { return GetToken(DianaScriptParser.NAME_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen__nullable_gen__seplist__L44__exprContext gen__nullable_gen__seplist__L44__expr() {
			return GetRuleContext<Gen__nullable_gen__seplist__L44__exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 4, RULE_option);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; _localctx.local__1_option_case0 = Match(NAME_13);
				State = 159; _localctx.local__2_option_case0 = gen__nullable_gen__seplist__L44__expr();
				 
				        (int, int, string, System.Collections.Generic.List<ImmediateAST>) tmp__44 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__43 ; 
				        CommonToken tmp__42 ; 
				        tmp__42 = ( CommonToken ) _localctx.local__1_option_case0 ; 
				        tmp__43 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_option_case0.result ; 
				        tmp__44 = ((int, int, string, System.Collections.Generic.List<ImmediateAST>)) mkOptionN( tmp__42, tmp__43 ); 
				        _localctx.result =  tmp__44; 
				      
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 162; Match(T__11);
				State = 163; _localctx.local__2_option_case1 = expr();
				 
				        (int, int, string, System.Collections.Generic.List<ImmediateAST>) tmp__46 ; 
				        ImmediateAST tmp__45 ; 
				        tmp__45 = ( ImmediateAST ) _localctx.local__2_option_case1.result ; 
				        tmp__46 = ((int, int, string, System.Collections.Generic.List<ImmediateAST>)) mkDoOption( tmp__45 ); 
				        _localctx.result =  tmp__46; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__nullable_gen__seplist__L44__exprContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__seplist__L44__exprContext local__1_gen__nullable_gen__seplist__L44__expr_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist__L44__exprContext gen__seplist__L44__expr() {
			return GetRuleContext<Gen__seplist__L44__exprContext>(0);
		}
		public Gen__nullable_gen__seplist__L44__exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__nullable_gen__seplist__L44__expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__nullable_gen__seplist__L44__expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__nullable_gen__seplist__L44__expr(this);
		}
	}

	[RuleVersion(0)]
	public Gen__nullable_gen__seplist__L44__exprContext gen__nullable_gen__seplist__L44__expr() {
		Gen__nullable_gen__seplist__L44__exprContext _localctx = new Gen__nullable_gen__seplist__L44__exprContext(Context, State);
		EnterRule(_localctx, 6, RULE_gen__nullable_gen__seplist__L44__expr);
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__47 ; 
				        tmp__47 = (System.Collections.Generic.List<ImmediateAST>) empty<ImmediateAST>(  ); 
				        _localctx.result =  tmp__47; 
				      
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; _localctx.local__1_gen__nullable_gen__seplist__L44__expr_case1 = gen__seplist__L44__expr(0);
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__48 ; 
				        tmp__48 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__nullable_gen__seplist__L44__expr_case1.result ; 
				        _localctx.result =  tmp__48; 
				      
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__seplist__L44__exprContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__seplist__L44__exprContext local__1_gen__seplist__L44__expr_case1;
		public ExprContext local__1_gen__seplist__L44__expr_case0;
		public ExprContext local__3_gen__seplist__L44__expr_case1;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist__L44__exprContext gen__seplist__L44__expr() {
			return GetRuleContext<Gen__seplist__L44__exprContext>(0);
		}
		public Gen__seplist__L44__exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__seplist__L44__expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__seplist__L44__expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__seplist__L44__expr(this);
		}
	}

	[RuleVersion(0)]
	public Gen__seplist__L44__exprContext gen__seplist__L44__expr() {
		return gen__seplist__L44__expr(0);
	}

	private Gen__seplist__L44__exprContext gen__seplist__L44__expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__seplist__L44__exprContext _localctx = new Gen__seplist__L44__exprContext(Context, _parentState);
		Gen__seplist__L44__exprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_gen__seplist__L44__expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 175; _localctx.local__1_gen__seplist__L44__expr_case0 = expr();
			 
			        ImmediateAST tmp__50 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__49 ; 
			        tmp__50 = ( ImmediateAST ) _localctx.local__1_gen__seplist__L44__expr_case0.result ; 
			        tmp__49 = new System.Collections.Generic.List<ImmediateAST> { tmp__50 }; 
			        _localctx.result =  tmp__49; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Gen__seplist__L44__exprContext(_parentctx, _parentState);
					_localctx.local__1_gen__seplist__L44__expr_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_gen__seplist__L44__expr);
					State = 178;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 179; Match(T__12);
					State = 180; _localctx.local__3_gen__seplist__L44__expr_case1 = expr();
					 
					                  System.Collections.Generic.List<ImmediateAST> tmp__53 ; 
					                  ImmediateAST tmp__52 ; 
					                  System.Collections.Generic.List<ImmediateAST> tmp__51 ; 
					                  tmp__51 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__seplist__L44__expr_case1.result ; 
					                  tmp__52 = ( ImmediateAST ) _localctx.local__3_gen__seplist__L44__expr_case1.result ; 
					                  tmp__53 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__51, tmp__52 ); 
					                  _localctx.result =  tmp__53; 
					                
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ImmediateAST result;
		public AtomContext local__1_atom_case0;
		public AtomContext local__1_atom_case1;
		public AtomContext local__1_atom_case2;
		public IToken local__1_atom_case3;
		public Gen__closelist__L44__exprContext local__2_atom_case3;
		public IToken local__1_atom_case4;
		public Gen__closelist__L44__exprContext local__2_atom_case4;
		public TrailerContext local__3_atom_case4;
		public IToken local__1_atom_case5;
		public Gen__closelist__L44__pairContext local__2_atom_case5;
		public IToken local__1_atom_case6;
		public IToken local__1_atom_case7;
		public IToken local__1_atom_case8;
		public IToken local__1_atom_case9;
		public IToken local__1_atom_case10;
		public IToken local__1_atom_case11;
		public IToken local__1_atom_case12;
		public IToken local__1_atom_case13;
		public IToken local__1_atom_case14;
		public AtomContext local__2_atom_case14;
		public IToken local__1_atom_case15;
		public AtomContext local__2_atom_case15;
		public IToken local__1_atom_case16;
		public ExprContext local__2_atom_case16;
		public ThenContext local__3_atom_case16;
		public BlockContext local__4_atom_case16;
		public IToken local__1_atom_case17;
		public ExprContext local__2_atom_case17;
		public ThenContext local__3_atom_case17;
		public BlockContext local__4_atom_case17;
		public Gen__nullable_gen__list_gen__snd_elif__elifBlockContext local__5_atom_case17;
		public Gen__optional_gen__blockOf_elseContext local__6_atom_case17;
		public IToken local__1_atom_case18;
		public NameContext local__2_atom_case18;
		public Gen__nullable_gen__seplist__L44__nameContext local__4_atom_case18;
		public BlockContext local__6_atom_case18;
		public IToken local__1_atom_case19;
		public Gen__nullable_gen__seplist__L44__nameContext local__3_atom_case19;
		public BlockContext local__5_atom_case19;
		public IToken local__1_atom_case20;
		public Gen__nullable_gen__seplist__L44__nameContext local__2_atom_case20;
		public Gen__line_wrap_exprContext local__5_atom_case20;
		public IToken local__1_atom_case21;
		public Gen__line_wrap_exprContext local__3_atom_case21;
		public IToken local__2_atom_case0;
		public ExprContext local__4_atom_case0;
		public IToken local__2_atom_case1;
		public IToken local__3_atom_case1;
		public IToken local__2_atom_case2;
		public Gen__closelist__L44__exprContext local__3_atom_case2;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__closelist__L44__exprContext gen__closelist__L44__expr() {
			return GetRuleContext<Gen__closelist__L44__exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TrailerContext trailer() {
			return GetRuleContext<TrailerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__closelist__L44__pairContext gen__closelist__L44__pair() {
			return GetRuleContext<Gen__closelist__L44__pairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_4() { return GetToken(DianaScriptParser.STR_4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_10() { return GetToken(DianaScriptParser.INT_10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_7() { return GetToken(DianaScriptParser.HEX_7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT_8() { return GetToken(DianaScriptParser.OCT_8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_9() { return GetToken(DianaScriptParser.BIN_9, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_11() { return GetToken(DianaScriptParser.FLOAT_11, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_13() { return GetToken(DianaScriptParser.NAME_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenContext then() {
			return GetRuleContext<ThenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__nullable_gen__list_gen__snd_elif__elifBlockContext gen__nullable_gen__list_gen__snd_elif__elifBlock() {
			return GetRuleContext<Gen__nullable_gen__list_gen__snd_elif__elifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_gen__blockOf_elseContext gen__optional_gen__blockOf_else() {
			return GetRuleContext<Gen__optional_gen__blockOf_elseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__nullable_gen__seplist__L44__nameContext gen__nullable_gen__seplist__L44__name() {
			return GetRuleContext<Gen__nullable_gen__seplist__L44__nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__line_wrap_exprContext gen__line_wrap_expr() {
			return GetRuleContext<Gen__line_wrap_exprContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		return atom(0);
	}

	private AtomContext atom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AtomContext _localctx = new AtomContext(Context, _parentState);
		AtomContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_atom, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 189; _localctx.local__1_atom_case3 = Match(T__14);
				State = 190; _localctx.local__2_atom_case3 = gen__closelist__L44__expr();
				State = 191; Match(T__15);
				 
				        ImmediateAST tmp__71 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__70 ; 
				        CommonToken tmp__69 ; 
				        tmp__69 = ( CommonToken ) _localctx.local__1_atom_case3 ; 
				        tmp__70 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_atom_case3.result ; 
				        tmp__71 = (ImmediateAST) mkList( tmp__69, tmp__70 ); 
				        _localctx.result =  tmp__71; 
				      
				}
				break;
			case 2:
				{
				State = 194; _localctx.local__1_atom_case4 = Match(T__16);
				State = 195; _localctx.local__2_atom_case4 = gen__closelist__L44__expr();
				State = 196; _localctx.local__3_atom_case4 = trailer();
				State = 197; Match(T__17);
				 
				        ImmediateAST tmp__75 ; 
				        bool tmp__74 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__73 ; 
				        CommonToken tmp__72 ; 
				        tmp__72 = ( CommonToken ) _localctx.local__1_atom_case4 ; 
				        tmp__73 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_atom_case4.result ; 
				        tmp__74 = ( bool ) _localctx.local__3_atom_case4.result ; 
				        tmp__75 = (ImmediateAST) mkTuple( tmp__72, tmp__73, tmp__74 ); 
				        _localctx.result =  tmp__75; 
				      
				}
				break;
			case 3:
				{
				State = 200; _localctx.local__1_atom_case5 = Match(T__0);
				State = 201; _localctx.local__2_atom_case5 = gen__closelist__L44__pair();
				State = 202; trailer();
				State = 203; Match(T__1);
				 
				        ImmediateAST tmp__78 ; 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__77 ; 
				        CommonToken tmp__76 ; 
				        tmp__76 = ( CommonToken ) _localctx.local__1_atom_case5 ; 
				        tmp__77 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__2_atom_case5.result ; 
				        tmp__78 = (ImmediateAST) mkDict( tmp__76, tmp__77 ); 
				        _localctx.result =  tmp__78; 
				      
				}
				break;
			case 4:
				{
				State = 206; _localctx.local__1_atom_case6 = Match(STR_4);
				 
				        ImmediateAST tmp__83 ; 
				        DObj tmp__82 ; 
				        string tmp__81 ; 
				        CommonToken tmp__80 ; 
				        CommonToken tmp__79 ; 
				        tmp__79 = ( CommonToken ) _localctx.local__1_atom_case6 ; 
				        tmp__80 = ( CommonToken ) _localctx.local__1_atom_case6 ; 
				        tmp__81 = (string) unesc( tmp__80.Text ); 
				        tmp__82 = (DObj) mkstr( tmp__81 ); 
				        tmp__83 = (ImmediateAST) mkVal( tmp__79, tmp__82 ); 
				        _localctx.result =  tmp__83; 
				      
				}
				break;
			case 5:
				{
				State = 208; _localctx.local__1_atom_case7 = Match(INT_10);
				 
				        ImmediateAST tmp__88 ; 
				        DObj tmp__87 ; 
				        int tmp__86 ; 
				        CommonToken tmp__85 ; 
				        CommonToken tmp__84 ; 
				        tmp__84 = ( CommonToken ) _localctx.local__1_atom_case7 ; 
				        tmp__85 = ( CommonToken ) _localctx.local__1_atom_case7 ; 
				        tmp__86 = 0 ; 
				        tmp__87 = (DObj) mkint( tmp__85.Text, tmp__86 ); 
				        tmp__88 = (ImmediateAST) mkVal( tmp__84, tmp__87 ); 
				        _localctx.result =  tmp__88; 
				      
				}
				break;
			case 6:
				{
				State = 210; _localctx.local__1_atom_case8 = Match(HEX_7);
				 
				        ImmediateAST tmp__93 ; 
				        DObj tmp__92 ; 
				        int tmp__91 ; 
				        CommonToken tmp__90 ; 
				        CommonToken tmp__89 ; 
				        tmp__89 = ( CommonToken ) _localctx.local__1_atom_case8 ; 
				        tmp__90 = ( CommonToken ) _localctx.local__1_atom_case8 ; 
				        tmp__91 = 16 ; 
				        tmp__92 = (DObj) mkint( tmp__90.Text, tmp__91 ); 
				        tmp__93 = (ImmediateAST) mkVal( tmp__89, tmp__92 ); 
				        _localctx.result =  tmp__93; 
				      
				}
				break;
			case 7:
				{
				State = 212; _localctx.local__1_atom_case9 = Match(OCT_8);
				 
				        ImmediateAST tmp__98 ; 
				        DObj tmp__97 ; 
				        int tmp__96 ; 
				        CommonToken tmp__95 ; 
				        CommonToken tmp__94 ; 
				        tmp__94 = ( CommonToken ) _localctx.local__1_atom_case9 ; 
				        tmp__95 = ( CommonToken ) _localctx.local__1_atom_case9 ; 
				        tmp__96 = 8 ; 
				        tmp__97 = (DObj) mkint( tmp__95.Text, tmp__96 ); 
				        tmp__98 = (ImmediateAST) mkVal( tmp__94, tmp__97 ); 
				        _localctx.result =  tmp__98; 
				      
				}
				break;
			case 8:
				{
				State = 214; _localctx.local__1_atom_case10 = Match(BIN_9);
				 
				        ImmediateAST tmp__103 ; 
				        DObj tmp__102 ; 
				        int tmp__101 ; 
				        CommonToken tmp__100 ; 
				        CommonToken tmp__99 ; 
				        tmp__99 = ( CommonToken ) _localctx.local__1_atom_case10 ; 
				        tmp__100 = ( CommonToken ) _localctx.local__1_atom_case10 ; 
				        tmp__101 = 2 ; 
				        tmp__102 = (DObj) mkint( tmp__100.Text, tmp__101 ); 
				        tmp__103 = (ImmediateAST) mkVal( tmp__99, tmp__102 ); 
				        _localctx.result =  tmp__103; 
				      
				}
				break;
			case 9:
				{
				State = 216; _localctx.local__1_atom_case11 = Match(FLOAT_11);
				 
				        ImmediateAST tmp__107 ; 
				        DObj tmp__106 ; 
				        CommonToken tmp__105 ; 
				        CommonToken tmp__104 ; 
				        tmp__104 = ( CommonToken ) _localctx.local__1_atom_case11 ; 
				        tmp__105 = ( CommonToken ) _localctx.local__1_atom_case11 ; 
				        tmp__106 = (DObj) mkfloat( tmp__105.Text ); 
				        tmp__107 = (ImmediateAST) mkVal( tmp__104, tmp__106 ); 
				        _localctx.result =  tmp__107; 
				      
				}
				break;
			case 10:
				{
				State = 218; _localctx.local__1_atom_case12 = Match(T__18);
				 
				        ImmediateAST tmp__110 ; 
				        DObj tmp__109 ; 
				        CommonToken tmp__108 ; 
				        tmp__108 = ( CommonToken ) _localctx.local__1_atom_case12 ; 
				        tmp__109 = (DObj) mknone(  ); 
				        tmp__110 = (ImmediateAST) mkVal( tmp__108, tmp__109 ); 
				        _localctx.result =  tmp__110; 
				      
				}
				break;
			case 11:
				{
				State = 220; _localctx.local__1_atom_case13 = Match(NAME_13);
				 
				        ImmediateAST tmp__113 ; 
				        CommonToken tmp__112 ; 
				        CommonToken tmp__111 ; 
				        tmp__111 = ( CommonToken ) _localctx.local__1_atom_case13 ; 
				        tmp__112 = ( CommonToken ) _localctx.local__1_atom_case13 ; 
				        tmp__113 = (ImmediateAST) mkVar( tmp__111, tmp__112.Text ); 
				        _localctx.result =  tmp__113; 
				      
				}
				break;
			case 12:
				{
				State = 222; _localctx.local__1_atom_case14 = Match(T__19);
				State = 223; _localctx.local__2_atom_case14 = atom(8);
				 
				        ImmediateAST tmp__116 ; 
				        ImmediateAST tmp__115 ; 
				        CommonToken tmp__114 ; 
				        tmp__114 = ( CommonToken ) _localctx.local__1_atom_case14 ; 
				        tmp__115 = ( ImmediateAST ) _localctx.local__2_atom_case14.result ; 
				        tmp__116 = (ImmediateAST) mkNeg( tmp__114, tmp__115 ); 
				        _localctx.result =  tmp__116; 
				      
				}
				break;
			case 13:
				{
				State = 226; _localctx.local__1_atom_case15 = Match(T__20);
				State = 227; _localctx.local__2_atom_case15 = atom(7);
				 
				        ImmediateAST tmp__119 ; 
				        ImmediateAST tmp__118 ; 
				        CommonToken tmp__117 ; 
				        tmp__117 = ( CommonToken ) _localctx.local__1_atom_case15 ; 
				        tmp__118 = ( ImmediateAST ) _localctx.local__2_atom_case15.result ; 
				        tmp__119 = (ImmediateAST) mkInv( tmp__117, tmp__118 ); 
				        _localctx.result =  tmp__119; 
				      
				}
				break;
			case 14:
				{
				State = 230; _localctx.local__1_atom_case16 = Match(T__21);
				State = 231; _localctx.local__2_atom_case16 = expr();
				State = 232; _localctx.local__3_atom_case16 = then();
				State = 233; _localctx.local__4_atom_case16 = block();
				State = 234; Match(T__5);
				 
				        ImmediateAST tmp__125 ; 
				        ImmediateAST tmp__124 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__123 ; 
				        CommonToken tmp__122 ; 
				        ImmediateAST tmp__121 ; 
				        CommonToken tmp__120 ; 
				        tmp__120 = ( CommonToken ) _localctx.local__1_atom_case16 ; 
				        tmp__121 = ( ImmediateAST ) _localctx.local__2_atom_case16.result ; 
				        tmp__122 = ( CommonToken ) _localctx.local__3_atom_case16.result ; 
				        tmp__123 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__4_atom_case16.result ; 
				        tmp__124 = (ImmediateAST) mkBlock( tmp__122, tmp__123 ); 
				        tmp__125 = (ImmediateAST) mkIfThen( tmp__120, tmp__121, tmp__124 ); 
				        _localctx.result =  tmp__125; 
				      
				}
				break;
			case 15:
				{
				State = 237; _localctx.local__1_atom_case17 = Match(T__21);
				State = 238; _localctx.local__2_atom_case17 = expr();
				State = 239; _localctx.local__3_atom_case17 = then();
				State = 240; _localctx.local__4_atom_case17 = block();
				State = 241; _localctx.local__5_atom_case17 = gen__nullable_gen__list_gen__snd_elif__elifBlock();
				State = 242; _localctx.local__6_atom_case17 = gen__optional_gen__blockOf_else();
				State = 243; Match(T__5);
				 
				        ImmediateAST tmp__137 ; 
				        ImmediateAST tmp__136 ; 
				        CommonToken tmp__135 ; 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> elifs__133 ; 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__134 ; 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> elifs__131 ; 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__132 ; 
				        ImmediateAST tmp__130 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__129 ; 
				        CommonToken tmp__128 ; 
				        ImmediateAST tmp__127 ; 
				        (ImmediateAST, ImmediateAST) elif__126 ; 
				        tmp__127 = ( ImmediateAST ) _localctx.local__2_atom_case17.result ; 
				        tmp__128 = ( CommonToken ) _localctx.local__3_atom_case17.result ; 
				        tmp__129 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__4_atom_case17.result ; 
				        tmp__130 = (ImmediateAST) mkBlock( tmp__128, tmp__129 ); 
				        elif__126 = ( tmp__127 , tmp__130 ); 
				        tmp__132 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) empty<(ImmediateAST, ImmediateAST)>(  ); 
				        elifs__131 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) append<(ImmediateAST, ImmediateAST)>( tmp__132, elif__126 ); 
				        tmp__134 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__5_atom_case17.result ; 
				        elifs__133 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) extend<(ImmediateAST, ImmediateAST)>( elifs__131, tmp__134 ); 
				        tmp__135 = ( CommonToken ) _localctx.local__1_atom_case17 ; 
				        tmp__136 = ( ImmediateAST ) _localctx.local__6_atom_case17.result ; 
				        tmp__137 = (ImmediateAST) mkNestedIf( tmp__135, elifs__131, tmp__136 ); 
				        _localctx.result =  tmp__137; 
				      
				}
				break;
			case 16:
				{
				State = 246; _localctx.local__1_atom_case18 = Match(T__22);
				State = 247; _localctx.local__2_atom_case18 = name();
				State = 248; Match(T__16);
				State = 249; _localctx.local__4_atom_case18 = gen__nullable_gen__seplist__L44__name();
				State = 250; Match(T__17);
				State = 251; _localctx.local__6_atom_case18 = block();
				State = 252; Match(T__5);
				 
				        ImmediateAST tmp__142 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__141 ; 
				        System.Collections.Generic.List<string> tmp__140 ; 
				        string tmp__139 ; 
				        CommonToken tmp__138 ; 
				        tmp__138 = ( CommonToken ) _localctx.local__1_atom_case18 ; 
				        tmp__139 = ( string ) _localctx.local__2_atom_case18.result ; 
				        tmp__140 = ( System.Collections.Generic.List<string> ) _localctx.local__4_atom_case18.result ; 
				        tmp__141 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__6_atom_case18.result ; 
				        tmp__142 = (ImmediateAST) mkFunc( tmp__138, tmp__139, tmp__140, tmp__141 ); 
				        _localctx.result =  tmp__142; 
				      
				}
				break;
			case 17:
				{
				State = 255; _localctx.local__1_atom_case19 = Match(T__22);
				State = 256; Match(T__16);
				State = 257; _localctx.local__3_atom_case19 = gen__nullable_gen__seplist__L44__name();
				State = 258; Match(T__17);
				State = 259; _localctx.local__5_atom_case19 = block();
				State = 260; Match(T__5);
				 
				        ImmediateAST tmp__147 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__146 ; 
				        System.Collections.Generic.List<string> tmp__145 ; 
				        string tmp__144 ; 
				        CommonToken tmp__143 ; 
				        tmp__143 = ( CommonToken ) _localctx.local__1_atom_case19 ; 
				        tmp__144 = "" ; 
				        tmp__145 = ( System.Collections.Generic.List<string> ) _localctx.local__3_atom_case19.result ; 
				        tmp__146 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__5_atom_case19.result ; 
				        tmp__147 = (ImmediateAST) mkFunc( tmp__143, tmp__144, tmp__145, tmp__146 ); 
				        _localctx.result =  tmp__147; 
				      
				}
				break;
			case 18:
				{
				State = 263; _localctx.local__1_atom_case20 = Match(T__16);
				State = 264; _localctx.local__2_atom_case20 = gen__nullable_gen__seplist__L44__name();
				State = 265; Match(T__17);
				State = 266; Match(T__23);
				State = 267; _localctx.local__5_atom_case20 = gen__line_wrap_expr();
				 
				        ImmediateAST tmp__153 ; 
				        ImmediateAST tmp__152 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__151 ; 
				        System.Collections.Generic.List<string> tmp__150 ; 
				        string tmp__149 ; 
				        CommonToken tmp__148 ; 
				        tmp__148 = ( CommonToken ) _localctx.local__1_atom_case20 ; 
				        tmp__149 = "" ; 
				        tmp__150 = ( System.Collections.Generic.List<string> ) _localctx.local__2_atom_case20.result ; 
				        tmp__152 = ( ImmediateAST ) _localctx.local__5_atom_case20.result ; 
				        tmp__151 = new System.Collections.Generic.List<ImmediateAST> { tmp__152 }; 
				        tmp__153 = (ImmediateAST) mkFunc( tmp__148, tmp__149, tmp__150, tmp__151 ); 
				        _localctx.result =  tmp__153; 
				      
				}
				break;
			case 19:
				{
				State = 270; _localctx.local__1_atom_case21 = Match(NAME_13);
				State = 271; Match(T__23);
				State = 272; _localctx.local__3_atom_case21 = gen__line_wrap_expr();
				 
				        ImmediateAST tmp__160 ; 
				        ImmediateAST tmp__159 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__158 ; 
				        CommonToken tmp__157 ; 
				        System.Collections.Generic.List<string> tmp__156 ; 
				        string tmp__155 ; 
				        CommonToken tmp__154 ; 
				        tmp__154 = ( CommonToken ) _localctx.local__1_atom_case21 ; 
				        tmp__155 = "" ; 
				        tmp__157 = ( CommonToken ) _localctx.local__1_atom_case21 ; 
				        tmp__156 = new System.Collections.Generic.List<string> { tmp__157.Text }; 
				        tmp__159 = ( ImmediateAST ) _localctx.local__3_atom_case21.result ; 
				        tmp__158 = new System.Collections.Generic.List<ImmediateAST> { tmp__159 }; 
				        tmp__160 = (ImmediateAST) mkFunc( tmp__154, tmp__155, tmp__156, tmp__158 ); 
				        _localctx.result =  tmp__160; 
				      
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 294;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new AtomContext(_parentctx, _parentState);
						_localctx.local__1_atom_case0 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_atom);
						State = 277;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 278; _localctx.local__2_atom_case0 = Match(T__13);
						State = 279; Match(T__14);
						State = 280; _localctx.local__4_atom_case0 = expr();
						State = 281; Match(T__15);
						 
						                  ImmediateAST tmp__57 ; 
						                  ImmediateAST tmp__56 ; 
						                  ImmediateAST tmp__55 ; 
						                  CommonToken tmp__54 ; 
						                  tmp__54 = ( CommonToken ) _localctx.local__2_atom_case0 ; 
						                  tmp__55 = ( ImmediateAST ) _localctx.local__1_atom_case0.result ; 
						                  tmp__56 = ( ImmediateAST ) _localctx.local__4_atom_case0.result ; 
						                  tmp__57 = (ImmediateAST) mkOGet( tmp__54, tmp__55, tmp__56 ); 
						                  _localctx.result =  tmp__57; 
						                
						}
						break;
					case 2:
						{
						_localctx = new AtomContext(_parentctx, _parentState);
						_localctx.local__1_atom_case1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_atom);
						State = 284;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 285; _localctx.local__2_atom_case1 = Match(T__13);
						State = 286; _localctx.local__3_atom_case1 = Match(NAME_13);
						 
						                  ImmediateAST tmp__64 ; 
						                  ImmediateAST tmp__63 ; 
						                  DObj tmp__62 ; 
						                  CommonToken tmp__61 ; 
						                  CommonToken tmp__60 ; 
						                  ImmediateAST tmp__59 ; 
						                  CommonToken tmp__58 ; 
						                  tmp__58 = ( CommonToken ) _localctx.local__2_atom_case1 ; 
						                  tmp__59 = ( ImmediateAST ) _localctx.local__1_atom_case1.result ; 
						                  tmp__60 = ( CommonToken ) _localctx.local__3_atom_case1 ; 
						                  tmp__61 = ( CommonToken ) _localctx.local__3_atom_case1 ; 
						                  tmp__62 = (DObj) mkstr( tmp__61.Text ); 
						                  tmp__63 = (ImmediateAST) mkVal( tmp__60, tmp__62 ); 
						                  tmp__64 = (ImmediateAST) mkOGet( tmp__58, tmp__59, tmp__63 ); 
						                  _localctx.result =  tmp__64; 
						                
						}
						break;
					case 3:
						{
						_localctx = new AtomContext(_parentctx, _parentState);
						_localctx.local__1_atom_case2 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_atom);
						State = 288;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 289; _localctx.local__2_atom_case2 = Match(T__16);
						State = 290; _localctx.local__3_atom_case2 = gen__closelist__L44__expr();
						State = 291; Match(T__17);
						 
						                  ImmediateAST tmp__68 ; 
						                  System.Collections.Generic.List<ImmediateAST> tmp__67 ; 
						                  ImmediateAST tmp__66 ; 
						                  CommonToken tmp__65 ; 
						                  tmp__65 = ( CommonToken ) _localctx.local__2_atom_case2 ; 
						                  tmp__66 = ( ImmediateAST ) _localctx.local__1_atom_case2.result ; 
						                  tmp__67 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__3_atom_case2.result ; 
						                  tmp__68 = (ImmediateAST) mkApp( tmp__65, tmp__66, tmp__67 ); 
						                  _localctx.result =  tmp__68; 
						                
						}
						break;
					}
					} 
				}
				State = 298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Gen__line_wrap_exprContext : ParserRuleContext {
		public ImmediateAST result;
		public ExprContext local__2_gen__line_wrap_expr_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext[] gen__optional_NEWLINE() {
			return GetRuleContexts<Gen__optional_NEWLINEContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE(int i) {
			return GetRuleContext<Gen__optional_NEWLINEContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Gen__line_wrap_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__line_wrap_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__line_wrap_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__line_wrap_expr(this);
		}
	}

	[RuleVersion(0)]
	public Gen__line_wrap_exprContext gen__line_wrap_expr() {
		Gen__line_wrap_exprContext _localctx = new Gen__line_wrap_exprContext(Context, State);
		EnterRule(_localctx, 12, RULE_gen__line_wrap_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; gen__optional_NEWLINE();
			State = 300; _localctx.local__2_gen__line_wrap_expr_case0 = expr();
			State = 301; gen__optional_NEWLINE();
			 
			        ImmediateAST tmp__161 ; 
			        tmp__161 = ( ImmediateAST ) _localctx.local__2_gen__line_wrap_expr_case0.result ; 
			        _localctx.result =  tmp__161; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__optional_NEWLINEContext : ParserRuleContext {
		public CommonToken result;
		public IToken local__1_gen__optional_NEWLINE_case1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE_17() { return GetToken(DianaScriptParser.NEWLINE_17, 0); }
		public Gen__optional_NEWLINEContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__optional_NEWLINE; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__optional_NEWLINE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__optional_NEWLINE(this);
		}
	}

	[RuleVersion(0)]
	public Gen__optional_NEWLINEContext gen__optional_NEWLINE() {
		Gen__optional_NEWLINEContext _localctx = new Gen__optional_NEWLINEContext(Context, State);
		EnterRule(_localctx, 14, RULE_gen__optional_NEWLINE);
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 
				        _localctx.result =  null; 
				      
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; _localctx.local__1_gen__optional_NEWLINE_case1 = Match(NEWLINE_17);
				 
				        CommonToken tmp__162 ; 
				        tmp__162 = ( CommonToken ) _localctx.local__1_gen__optional_NEWLINE_case1 ; 
				        _localctx.result =  tmp__162; 
				      
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__nullable_gen__seplist__L44__nameContext : ParserRuleContext {
		public System.Collections.Generic.List<string> result;
		public Gen__seplist__L44__nameContext local__1_gen__nullable_gen__seplist__L44__name_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist__L44__nameContext gen__seplist__L44__name() {
			return GetRuleContext<Gen__seplist__L44__nameContext>(0);
		}
		public Gen__nullable_gen__seplist__L44__nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__nullable_gen__seplist__L44__name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__nullable_gen__seplist__L44__name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__nullable_gen__seplist__L44__name(this);
		}
	}

	[RuleVersion(0)]
	public Gen__nullable_gen__seplist__L44__nameContext gen__nullable_gen__seplist__L44__name() {
		Gen__nullable_gen__seplist__L44__nameContext _localctx = new Gen__nullable_gen__seplist__L44__nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_gen__nullable_gen__seplist__L44__name);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				 
				        System.Collections.Generic.List<string> tmp__163 ; 
				        tmp__163 = (System.Collections.Generic.List<string>) empty<string>(  ); 
				        _localctx.result =  tmp__163; 
				      
				}
				break;
			case NAME_13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310; _localctx.local__1_gen__nullable_gen__seplist__L44__name_case1 = gen__seplist__L44__name(0);
				 
				        System.Collections.Generic.List<string> tmp__164 ; 
				        tmp__164 = ( System.Collections.Generic.List<string> ) _localctx.local__1_gen__nullable_gen__seplist__L44__name_case1.result ; 
				        _localctx.result =  tmp__164; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__seplist__L44__nameContext : ParserRuleContext {
		public System.Collections.Generic.List<string> result;
		public Gen__seplist__L44__nameContext local__1_gen__seplist__L44__name_case1;
		public NameContext local__1_gen__seplist__L44__name_case0;
		public NameContext local__3_gen__seplist__L44__name_case1;
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist__L44__nameContext gen__seplist__L44__name() {
			return GetRuleContext<Gen__seplist__L44__nameContext>(0);
		}
		public Gen__seplist__L44__nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__seplist__L44__name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__seplist__L44__name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__seplist__L44__name(this);
		}
	}

	[RuleVersion(0)]
	public Gen__seplist__L44__nameContext gen__seplist__L44__name() {
		return gen__seplist__L44__name(0);
	}

	private Gen__seplist__L44__nameContext gen__seplist__L44__name(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__seplist__L44__nameContext _localctx = new Gen__seplist__L44__nameContext(Context, _parentState);
		Gen__seplist__L44__nameContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_gen__seplist__L44__name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 316; _localctx.local__1_gen__seplist__L44__name_case0 = name();
			 
			        string tmp__166 ; 
			        System.Collections.Generic.List<string> tmp__165 ; 
			        tmp__166 = ( string ) _localctx.local__1_gen__seplist__L44__name_case0.result ; 
			        tmp__165 = new System.Collections.Generic.List<string> { tmp__166 }; 
			        _localctx.result =  tmp__165; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Gen__seplist__L44__nameContext(_parentctx, _parentState);
					_localctx.local__1_gen__seplist__L44__name_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_gen__seplist__L44__name);
					State = 319;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 320; Match(T__12);
					State = 321; _localctx.local__3_gen__seplist__L44__name_case1 = name();
					 
					                  System.Collections.Generic.List<string> tmp__169 ; 
					                  string tmp__168 ; 
					                  System.Collections.Generic.List<string> tmp__167 ; 
					                  tmp__167 = ( System.Collections.Generic.List<string> ) _localctx.local__1_gen__seplist__L44__name_case1.result ; 
					                  tmp__168 = ( string ) _localctx.local__3_gen__seplist__L44__name_case1.result ; 
					                  tmp__169 = (System.Collections.Generic.List<string>) append<string>( tmp__167, tmp__168 ); 
					                  _localctx.result =  tmp__169; 
					                
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Gen__optional_gen__blockOf_elseContext : ParserRuleContext {
		public ImmediateAST result;
		public Gen__blockOf_elseContext local__1_gen__optional_gen__blockOf_else_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__blockOf_elseContext gen__blockOf_else() {
			return GetRuleContext<Gen__blockOf_elseContext>(0);
		}
		public Gen__optional_gen__blockOf_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__optional_gen__blockOf_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__optional_gen__blockOf_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__optional_gen__blockOf_else(this);
		}
	}

	[RuleVersion(0)]
	public Gen__optional_gen__blockOf_elseContext gen__optional_gen__blockOf_else() {
		Gen__optional_gen__blockOf_elseContext _localctx = new Gen__optional_gen__blockOf_elseContext(Context, State);
		EnterRule(_localctx, 20, RULE_gen__optional_gen__blockOf_else);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				EnterOuterAlt(_localctx, 1);
				{
				 
				        _localctx.result =  null; 
				      
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; _localctx.local__1_gen__optional_gen__blockOf_else_case1 = gen__blockOf_else();
				 
				        ImmediateAST tmp__170 ; 
				        tmp__170 = ( ImmediateAST ) _localctx.local__1_gen__optional_gen__blockOf_else_case1.result ; 
				        _localctx.result =  tmp__170; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__blockOf_elseContext : ParserRuleContext {
		public ImmediateAST result;
		public IToken local__1_gen__blockOf_else_case0;
		public BlockContext local__2_gen__blockOf_else_case0;
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Gen__blockOf_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__blockOf_else; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__blockOf_else(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__blockOf_else(this);
		}
	}

	[RuleVersion(0)]
	public Gen__blockOf_elseContext gen__blockOf_else() {
		Gen__blockOf_elseContext _localctx = new Gen__blockOf_elseContext(Context, State);
		EnterRule(_localctx, 22, RULE_gen__blockOf_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335; _localctx.local__1_gen__blockOf_else_case0 = Match(T__24);
			State = 336; _localctx.local__2_gen__blockOf_else_case0 = block();
			 
			        ImmediateAST tmp__173 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__172 ; 
			        CommonToken tmp__171 ; 
			        tmp__171 = ( CommonToken ) _localctx.local__1_gen__blockOf_else_case0 ; 
			        tmp__172 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_gen__blockOf_else_case0.result ; 
			        tmp__173 = (ImmediateAST) mkBlock( tmp__171, tmp__172 ); 
			        _localctx.result =  tmp__173; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__nullable_gen__list_gen__snd_elif__elifBlockContext : ParserRuleContext {
		public System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> result;
		public Gen__list_gen__snd_elif__elifBlockContext local__1_gen__nullable_gen__list_gen__snd_elif__elifBlock_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__list_gen__snd_elif__elifBlockContext gen__list_gen__snd_elif__elifBlock() {
			return GetRuleContext<Gen__list_gen__snd_elif__elifBlockContext>(0);
		}
		public Gen__nullable_gen__list_gen__snd_elif__elifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__nullable_gen__list_gen__snd_elif__elifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__nullable_gen__list_gen__snd_elif__elifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__nullable_gen__list_gen__snd_elif__elifBlock(this);
		}
	}

	[RuleVersion(0)]
	public Gen__nullable_gen__list_gen__snd_elif__elifBlockContext gen__nullable_gen__list_gen__snd_elif__elifBlock() {
		Gen__nullable_gen__list_gen__snd_elif__elifBlockContext _localctx = new Gen__nullable_gen__list_gen__snd_elif__elifBlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_gen__nullable_gen__list_gen__snd_elif__elifBlock);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
			case T__24:
				EnterOuterAlt(_localctx, 1);
				{
				 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__174 ; 
				        tmp__174 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) empty<(ImmediateAST, ImmediateAST)>(  ); 
				        _localctx.result =  tmp__174; 
				      
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 2);
				{
				State = 340; _localctx.local__1_gen__nullable_gen__list_gen__snd_elif__elifBlock_case1 = gen__list_gen__snd_elif__elifBlock(0);
				 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__175 ; 
				        tmp__175 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__1_gen__nullable_gen__list_gen__snd_elif__elifBlock_case1.result ; 
				        _localctx.result =  tmp__175; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__list_gen__snd_elif__elifBlockContext : ParserRuleContext {
		public System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> result;
		public Gen__list_gen__snd_elif__elifBlockContext local__1_gen__list_gen__snd_elif__elifBlock_case1;
		public Gen__snd_elif__elifBlockContext local__1_gen__list_gen__snd_elif__elifBlock_case0;
		public Gen__snd_elif__elifBlockContext local__2_gen__list_gen__snd_elif__elifBlock_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__snd_elif__elifBlockContext gen__snd_elif__elifBlock() {
			return GetRuleContext<Gen__snd_elif__elifBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__list_gen__snd_elif__elifBlockContext gen__list_gen__snd_elif__elifBlock() {
			return GetRuleContext<Gen__list_gen__snd_elif__elifBlockContext>(0);
		}
		public Gen__list_gen__snd_elif__elifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__list_gen__snd_elif__elifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__list_gen__snd_elif__elifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__list_gen__snd_elif__elifBlock(this);
		}
	}

	[RuleVersion(0)]
	public Gen__list_gen__snd_elif__elifBlockContext gen__list_gen__snd_elif__elifBlock() {
		return gen__list_gen__snd_elif__elifBlock(0);
	}

	private Gen__list_gen__snd_elif__elifBlockContext gen__list_gen__snd_elif__elifBlock(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__list_gen__snd_elif__elifBlockContext _localctx = new Gen__list_gen__snd_elif__elifBlockContext(Context, _parentState);
		Gen__list_gen__snd_elif__elifBlockContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_gen__list_gen__snd_elif__elifBlock, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 346; _localctx.local__1_gen__list_gen__snd_elif__elifBlock_case0 = gen__snd_elif__elifBlock();
			 
			        (ImmediateAST, ImmediateAST) tmp__177 ; 
			        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__176 ; 
			        tmp__177 = ( (ImmediateAST, ImmediateAST) ) _localctx.local__1_gen__list_gen__snd_elif__elifBlock_case0.result ; 
			        tmp__176 = new System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> { tmp__177 }; 
			        _localctx.result =  tmp__176; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 355;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Gen__list_gen__snd_elif__elifBlockContext(_parentctx, _parentState);
					_localctx.local__1_gen__list_gen__snd_elif__elifBlock_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_gen__list_gen__snd_elif__elifBlock);
					State = 349;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 350; _localctx.local__2_gen__list_gen__snd_elif__elifBlock_case1 = gen__snd_elif__elifBlock();
					 
					                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__180 ; 
					                  (ImmediateAST, ImmediateAST) tmp__179 ; 
					                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__178 ; 
					                  tmp__178 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__1_gen__list_gen__snd_elif__elifBlock_case1.result ; 
					                  tmp__179 = ( (ImmediateAST, ImmediateAST) ) _localctx.local__2_gen__list_gen__snd_elif__elifBlock_case1.result ; 
					                  tmp__180 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) append<(ImmediateAST, ImmediateAST)>( tmp__178, tmp__179 ); 
					                  _localctx.result =  tmp__180; 
					                
					}
					} 
				}
				State = 357;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Gen__snd_elif__elifBlockContext : ParserRuleContext {
		public (ImmediateAST, ImmediateAST) result;
		public ElifBlockContext local__2_gen__snd_elif__elifBlock_case0;
		[System.Diagnostics.DebuggerNonUserCode] public ElifBlockContext elifBlock() {
			return GetRuleContext<ElifBlockContext>(0);
		}
		public Gen__snd_elif__elifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__snd_elif__elifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__snd_elif__elifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__snd_elif__elifBlock(this);
		}
	}

	[RuleVersion(0)]
	public Gen__snd_elif__elifBlockContext gen__snd_elif__elifBlock() {
		Gen__snd_elif__elifBlockContext _localctx = new Gen__snd_elif__elifBlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_gen__snd_elif__elifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(T__25);
			State = 359; _localctx.local__2_gen__snd_elif__elifBlock_case0 = elifBlock();
			 
			        (ImmediateAST, ImmediateAST) tmp__181 ; 
			        tmp__181 = ( (ImmediateAST, ImmediateAST) ) _localctx.local__2_gen__snd_elif__elifBlock_case0.result ; 
			        _localctx.result =  tmp__181; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__closelist__L44__pairContext : ParserRuleContext {
		public System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> result;
		public Gen___closelist__L44__pairContext local__2_gen__closelist__L44__pair_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE() {
			return GetRuleContext<Gen__optional_NEWLINEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen___closelist__L44__pairContext gen___closelist__L44__pair() {
			return GetRuleContext<Gen___closelist__L44__pairContext>(0);
		}
		public Gen__closelist__L44__pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__closelist__L44__pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__closelist__L44__pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__closelist__L44__pair(this);
		}
	}

	[RuleVersion(0)]
	public Gen__closelist__L44__pairContext gen__closelist__L44__pair() {
		Gen__closelist__L44__pairContext _localctx = new Gen__closelist__L44__pairContext(Context, State);
		EnterRule(_localctx, 30, RULE_gen__closelist__L44__pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; gen__optional_NEWLINE();
			State = 363; _localctx.local__2_gen__closelist__L44__pair_case0 = gen___closelist__L44__pair(0);
			 
			        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__182 ; 
			        tmp__182 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__2_gen__closelist__L44__pair_case0.result ; 
			        _localctx.result =  tmp__182; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen___closelist__L44__pairContext : ParserRuleContext {
		public System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> result;
		public Gen___closelist__L44__pairContext local__1_gen___closelist__L44__pair_case0;
		public Gen___closelist__L44__pairContext local__1_gen___closelist__L44__pair_case1;
		public Gen___closelist__L44__pairContext local__1_gen___closelist__L44__pair_case2;
		public PairContext local__1_gen___closelist__L44__pair_case3;
		public PairContext local__4_gen___closelist__L44__pair_case1;
		public PairContext local__3_gen___closelist__L44__pair_case2;
		[System.Diagnostics.DebuggerNonUserCode] public PairContext pair() {
			return GetRuleContext<PairContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE_17() { return GetToken(DianaScriptParser.NEWLINE_17, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen___closelist__L44__pairContext gen___closelist__L44__pair() {
			return GetRuleContext<Gen___closelist__L44__pairContext>(0);
		}
		public Gen___closelist__L44__pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen___closelist__L44__pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen___closelist__L44__pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen___closelist__L44__pair(this);
		}
	}

	[RuleVersion(0)]
	public Gen___closelist__L44__pairContext gen___closelist__L44__pair() {
		return gen___closelist__L44__pair(0);
	}

	private Gen___closelist__L44__pairContext gen___closelist__L44__pair(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen___closelist__L44__pairContext _localctx = new Gen___closelist__L44__pairContext(Context, _parentState);
		Gen___closelist__L44__pairContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_gen___closelist__L44__pair, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 367; _localctx.local__1_gen___closelist__L44__pair_case3 = pair();
				 
				        (ImmediateAST, ImmediateAST) tmp__191 ; 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__190 ; 
				        tmp__191 = ( (ImmediateAST, ImmediateAST) ) _localctx.local__1_gen___closelist__L44__pair_case3.result ; 
				        tmp__190 = new System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> { tmp__191 }; 
				        _localctx.result =  tmp__190; 
				      
				}
				break;
			case 2:
				{
				 
				        System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__192 ; 
				        tmp__192 = new System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> { }; 
				        _localctx.result =  tmp__192; 
				      
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 389;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 387;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new Gen___closelist__L44__pairContext(_parentctx, _parentState);
						_localctx.local__1_gen___closelist__L44__pair_case0 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen___closelist__L44__pair);
						State = 373;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 374; Match(NEWLINE_17);
						 
						                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__183 ; 
						                  tmp__183 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__1_gen___closelist__L44__pair_case0.result ; 
						                  _localctx.result =  tmp__183; 
						                
						}
						break;
					case 2:
						{
						_localctx = new Gen___closelist__L44__pairContext(_parentctx, _parentState);
						_localctx.local__1_gen___closelist__L44__pair_case1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen___closelist__L44__pair);
						State = 376;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 377; Match(T__12);
						State = 378; Match(NEWLINE_17);
						State = 379; _localctx.local__4_gen___closelist__L44__pair_case1 = pair();
						 
						                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__186 ; 
						                  (ImmediateAST, ImmediateAST) tmp__185 ; 
						                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__184 ; 
						                  tmp__184 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__1_gen___closelist__L44__pair_case1.result ; 
						                  tmp__185 = ( (ImmediateAST, ImmediateAST) ) _localctx.local__4_gen___closelist__L44__pair_case1.result ; 
						                  tmp__186 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) append<(ImmediateAST, ImmediateAST)>( tmp__184, tmp__185 ); 
						                  _localctx.result =  tmp__186; 
						                
						}
						break;
					case 3:
						{
						_localctx = new Gen___closelist__L44__pairContext(_parentctx, _parentState);
						_localctx.local__1_gen___closelist__L44__pair_case2 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen___closelist__L44__pair);
						State = 382;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 383; Match(T__12);
						State = 384; _localctx.local__3_gen___closelist__L44__pair_case2 = pair();
						 
						                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__189 ; 
						                  (ImmediateAST, ImmediateAST) tmp__188 ; 
						                  System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> tmp__187 ; 
						                  tmp__187 = ( System.Collections.Generic.List<(ImmediateAST, ImmediateAST)> ) _localctx.local__1_gen___closelist__L44__pair_case2.result ; 
						                  tmp__188 = ( (ImmediateAST, ImmediateAST) ) _localctx.local__3_gen___closelist__L44__pair_case2.result ; 
						                  tmp__189 = (System.Collections.Generic.List<(ImmediateAST, ImmediateAST)>) append<(ImmediateAST, ImmediateAST)>( tmp__187, tmp__188 ); 
						                  _localctx.result =  tmp__189; 
						                
						}
						break;
					}
					} 
				}
				State = 391;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Gen__closelist__L44__exprContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen___closelist__L44__exprContext local__2_gen__closelist__L44__expr_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE() {
			return GetRuleContext<Gen__optional_NEWLINEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen___closelist__L44__exprContext gen___closelist__L44__expr() {
			return GetRuleContext<Gen___closelist__L44__exprContext>(0);
		}
		public Gen__closelist__L44__exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__closelist__L44__expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__closelist__L44__expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__closelist__L44__expr(this);
		}
	}

	[RuleVersion(0)]
	public Gen__closelist__L44__exprContext gen__closelist__L44__expr() {
		Gen__closelist__L44__exprContext _localctx = new Gen__closelist__L44__exprContext(Context, State);
		EnterRule(_localctx, 34, RULE_gen__closelist__L44__expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392; gen__optional_NEWLINE();
			State = 393; _localctx.local__2_gen__closelist__L44__expr_case0 = gen___closelist__L44__expr(0);
			 
			        System.Collections.Generic.List<ImmediateAST> tmp__193 ; 
			        tmp__193 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_gen__closelist__L44__expr_case0.result ; 
			        _localctx.result =  tmp__193; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen___closelist__L44__exprContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen___closelist__L44__exprContext local__1_gen___closelist__L44__expr_case0;
		public Gen___closelist__L44__exprContext local__1_gen___closelist__L44__expr_case1;
		public Gen___closelist__L44__exprContext local__1_gen___closelist__L44__expr_case2;
		public ExprContext local__1_gen___closelist__L44__expr_case3;
		public ExprContext local__4_gen___closelist__L44__expr_case1;
		public ExprContext local__3_gen___closelist__L44__expr_case2;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE_17() { return GetToken(DianaScriptParser.NEWLINE_17, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen___closelist__L44__exprContext gen___closelist__L44__expr() {
			return GetRuleContext<Gen___closelist__L44__exprContext>(0);
		}
		public Gen___closelist__L44__exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen___closelist__L44__expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen___closelist__L44__expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen___closelist__L44__expr(this);
		}
	}

	[RuleVersion(0)]
	public Gen___closelist__L44__exprContext gen___closelist__L44__expr() {
		return gen___closelist__L44__expr(0);
	}

	private Gen___closelist__L44__exprContext gen___closelist__L44__expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen___closelist__L44__exprContext _localctx = new Gen___closelist__L44__exprContext(Context, _parentState);
		Gen___closelist__L44__exprContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_gen___closelist__L44__expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 401;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 397; _localctx.local__1_gen___closelist__L44__expr_case3 = expr();
				 
				        ImmediateAST tmp__202 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__201 ; 
				        tmp__202 = ( ImmediateAST ) _localctx.local__1_gen___closelist__L44__expr_case3.result ; 
				        tmp__201 = new System.Collections.Generic.List<ImmediateAST> { tmp__202 }; 
				        _localctx.result =  tmp__201; 
				      
				}
				break;
			case 2:
				{
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__203 ; 
				        tmp__203 = new System.Collections.Generic.List<ImmediateAST> { }; 
				        _localctx.result =  tmp__203; 
				      
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 417;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						_localctx = new Gen___closelist__L44__exprContext(_parentctx, _parentState);
						_localctx.local__1_gen___closelist__L44__expr_case0 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen___closelist__L44__expr);
						State = 403;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 404; Match(NEWLINE_17);
						 
						                  System.Collections.Generic.List<ImmediateAST> tmp__194 ; 
						                  tmp__194 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen___closelist__L44__expr_case0.result ; 
						                  _localctx.result =  tmp__194; 
						                
						}
						break;
					case 2:
						{
						_localctx = new Gen___closelist__L44__exprContext(_parentctx, _parentState);
						_localctx.local__1_gen___closelist__L44__expr_case1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen___closelist__L44__expr);
						State = 406;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 407; Match(T__12);
						State = 408; Match(NEWLINE_17);
						State = 409; _localctx.local__4_gen___closelist__L44__expr_case1 = expr();
						 
						                  System.Collections.Generic.List<ImmediateAST> tmp__197 ; 
						                  ImmediateAST tmp__196 ; 
						                  System.Collections.Generic.List<ImmediateAST> tmp__195 ; 
						                  tmp__195 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen___closelist__L44__expr_case1.result ; 
						                  tmp__196 = ( ImmediateAST ) _localctx.local__4_gen___closelist__L44__expr_case1.result ; 
						                  tmp__197 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__195, tmp__196 ); 
						                  _localctx.result =  tmp__197; 
						                
						}
						break;
					case 3:
						{
						_localctx = new Gen___closelist__L44__exprContext(_parentctx, _parentState);
						_localctx.local__1_gen___closelist__L44__expr_case2 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen___closelist__L44__expr);
						State = 412;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 413; Match(T__12);
						State = 414; _localctx.local__3_gen___closelist__L44__expr_case2 = expr();
						 
						                  System.Collections.Generic.List<ImmediateAST> tmp__200 ; 
						                  ImmediateAST tmp__199 ; 
						                  System.Collections.Generic.List<ImmediateAST> tmp__198 ; 
						                  tmp__198 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen___closelist__L44__expr_case2.result ; 
						                  tmp__199 = ( ImmediateAST ) _localctx.local__3_gen___closelist__L44__expr_case2.result ; 
						                  tmp__200 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__198, tmp__199 ); 
						                  _localctx.result =  tmp__200; 
						                
						}
						break;
					}
					} 
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public (ImmediateAST, ImmediateAST) result;
		public ExprContext local__1_pair_case0;
		public ExprContext local__3_pair_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__line_wrap__L58Context gen__line_wrap__L58() {
			return GetRuleContext<Gen__line_wrap__L58Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitPair(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 38, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; _localctx.local__1_pair_case0 = expr();
			State = 423; gen__line_wrap__L58();
			State = 424; _localctx.local__3_pair_case0 = expr();
			 
			        ImmediateAST tmp__206 ; 
			        ImmediateAST tmp__205 ; 
			        (ImmediateAST, ImmediateAST) tmp__204 ; 
			        tmp__205 = ( ImmediateAST ) _localctx.local__1_pair_case0.result ; 
			        tmp__206 = ( ImmediateAST ) _localctx.local__3_pair_case0.result ; 
			        tmp__204 = ( tmp__205 , tmp__206 ); 
			        _localctx.result =  tmp__204; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__line_wrap__L58Context : ParserRuleContext {
		public CommonToken result;
		public IToken local__2_gen__line_wrap__L58_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext[] gen__optional_NEWLINE() {
			return GetRuleContexts<Gen__optional_NEWLINEContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE(int i) {
			return GetRuleContext<Gen__optional_NEWLINEContext>(i);
		}
		public Gen__line_wrap__L58Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__line_wrap__L58; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__line_wrap__L58(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__line_wrap__L58(this);
		}
	}

	[RuleVersion(0)]
	public Gen__line_wrap__L58Context gen__line_wrap__L58() {
		Gen__line_wrap__L58Context _localctx = new Gen__line_wrap__L58Context(Context, State);
		EnterRule(_localctx, 40, RULE_gen__line_wrap__L58);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; gen__optional_NEWLINE();
			State = 428; _localctx.local__2_gen__line_wrap__L58_case0 = Match(T__26);
			State = 429; gen__optional_NEWLINE();
			 
			        CommonToken tmp__207 ; 
			        tmp__207 = ( CommonToken ) _localctx.local__2_gen__line_wrap__L58_case0 ; 
			        _localctx.result =  tmp__207; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailerContext : ParserRuleContext {
		public bool result;
		public TrailerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterTrailer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitTrailer(this);
		}
	}

	[RuleVersion(0)]
	public TrailerContext trailer() {
		TrailerContext _localctx = new TrailerContext(Context, State);
		EnterRule(_localctx, 42, RULE_trailer);
		try {
			State = 435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
				EnterOuterAlt(_localctx, 1);
				{
				State = 432; Match(T__12);
				 
				        _localctx.result =  true; 
				      
				}
				break;
			case T__1:
			case T__17:
				EnterOuterAlt(_localctx, 2);
				{
				 
				        _localctx.result =  false; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinContext : ParserRuleContext {
		public ImmediateAST result;
		public BinseqContext local__1_bin_case0;
		[System.Diagnostics.DebuggerNonUserCode] public BinseqContext binseq() {
			return GetRuleContext<BinseqContext>(0);
		}
		public BinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterBin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitBin(this);
		}
	}

	[RuleVersion(0)]
	public BinContext bin() {
		BinContext _localctx = new BinContext(Context, State);
		EnterRule(_localctx, 44, RULE_bin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; _localctx.local__1_bin_case0 = binseq(0);
			 
			        ImmediateAST tmp__209 ; 
			        System.Collections.Generic.List<object> tmp__208 ; 
			        tmp__208 = ( System.Collections.Generic.List<object> ) _localctx.local__1_bin_case0.result ; 
			        tmp__209 = (ImmediateAST) resolve_binop( tmp__208 ); 
			        _localctx.result =  tmp__209; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinseqContext : ParserRuleContext {
		public System.Collections.Generic.List<object> result;
		public BinseqContext local__1_binseq_case1;
		public AtomContext local__1_binseq_case0;
		public BinopContext local__2_binseq_case1;
		public AtomContext local__3_binseq_case1;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinseqContext binseq() {
			return GetRuleContext<BinseqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinopContext binop() {
			return GetRuleContext<BinopContext>(0);
		}
		public BinseqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binseq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterBinseq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitBinseq(this);
		}
	}

	[RuleVersion(0)]
	public BinseqContext binseq() {
		return binseq(0);
	}

	private BinseqContext binseq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BinseqContext _localctx = new BinseqContext(Context, _parentState);
		BinseqContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_binseq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 441; _localctx.local__1_binseq_case0 = atom(0);
			 
			        System.Collections.Generic.List<object> tmp__213 ; 
			        object tmp__212 ; 
			        ImmediateAST tmp__211 ; 
			        System.Collections.Generic.List<object> tmp__210 ; 
			        tmp__210 = (System.Collections.Generic.List<object>) empty<object>(  ); 
			        tmp__211 = ( ImmediateAST ) _localctx.local__1_binseq_case0.result ; 
			        tmp__212 = (object) to_obj<ImmediateAST>( tmp__211 ); 
			        tmp__213 = (System.Collections.Generic.List<object>) append<object>( tmp__210, tmp__212 ); 
			        _localctx.result =  tmp__213; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 451;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BinseqContext(_parentctx, _parentState);
					_localctx.local__1_binseq_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_binseq);
					State = 444;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 445; _localctx.local__2_binseq_case1 = binop();
					State = 446; _localctx.local__3_binseq_case1 = atom(0);
					 
					                  object tmp__219 ; 
					                  ImmediateAST tmp__218 ; 
					                  System.Collections.Generic.List<object> tmp__217 ; 
					                  System.Collections.Generic.List<object> block__214 ; 
					                  object tmp__216 ; 
					                  System.Collections.Generic.List<object> tmp__215 ; 
					                  tmp__215 = ( System.Collections.Generic.List<object> ) _localctx.local__1_binseq_case1.result ; 
					                  tmp__216 = ( object ) _localctx.local__2_binseq_case1.result ; 
					                  block__214 = (System.Collections.Generic.List<object>) append<object>( tmp__215, tmp__216 ); 
					                  tmp__217 = ( System.Collections.Generic.List<object> ) _localctx.local__1_binseq_case1.result ; 
					                  tmp__218 = ( ImmediateAST ) _localctx.local__3_binseq_case1.result ; 
					                  tmp__219 = (object) to_obj<ImmediateAST>( tmp__218 ); 
					                  block__214 = (System.Collections.Generic.List<object>) append<object>( tmp__217, tmp__219 ); 
					                  _localctx.result =  block__214; 
					                
					}
					} 
				}
				State = 453;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IbinContext : ParserRuleContext {
		public ImmediateAST result;
		public LhsContext local__1_ibin_case0;
		public IbinopContext local__2_ibin_case0;
		public IToken local__3_ibin_case0;
		public ExprContext local__4_ibin_case0;
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IbinopContext ibinop() {
			return GetRuleContext<IbinopContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public IbinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ibin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterIbin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitIbin(this);
		}
	}

	[RuleVersion(0)]
	public IbinContext ibin() {
		IbinContext _localctx = new IbinContext(Context, State);
		EnterRule(_localctx, 48, RULE_ibin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; _localctx.local__1_ibin_case0 = lhs();
			State = 455; _localctx.local__2_ibin_case0 = ibinop();
			State = 456; _localctx.local__3_ibin_case0 = Match(T__3);
			State = 457; _localctx.local__4_ibin_case0 = expr();
			 
			        ImmediateAST tmp__224 ; 
			        ImmediateAST tmp__223 ; 
			        string tmp__222 ; 
			        ImmediateAST tmp__221 ; 
			        CommonToken tmp__220 ; 
			        tmp__220 = ( CommonToken ) _localctx.local__3_ibin_case0 ; 
			        tmp__221 = ( ImmediateAST ) _localctx.local__1_ibin_case0.result ; 
			        tmp__222 = ( string ) _localctx.local__2_ibin_case0.result ; 
			        tmp__223 = ( ImmediateAST ) _localctx.local__4_ibin_case0.result ; 
			        tmp__224 = (ImmediateAST) mkIBin( tmp__220, tmp__221, tmp__222, tmp__223 ); 
			        _localctx.result =  tmp__224; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IbinopContext : ParserRuleContext {
		public string result;
		public IToken local__1_ibinop_case0;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BINOP_2() { return GetToken(DianaScriptParser.SINGLE_BINOP_2, 0); }
		public IbinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ibinop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterIbinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitIbinop(this);
		}
	}

	[RuleVersion(0)]
	public IbinopContext ibinop() {
		IbinopContext _localctx = new IbinopContext(Context, State);
		EnterRule(_localctx, 50, RULE_ibinop);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_BINOP_2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460; _localctx.local__1_ibinop_case0 = Match(SINGLE_BINOP_2);
				 
				        CommonToken tmp__225 ; 
				        tmp__225 = ( CommonToken ) _localctx.local__1_ibinop_case0 ; 
				        _localctx.result =  tmp__225.Text; 
				      
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 462; Match(T__19);
				 
				        string tmp__226 ; 
				        tmp__226 = "-" ; 
				        _localctx.result =  tmp__226; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinopContext : ParserRuleContext {
		public object result;
		public IToken local__1_binop_case0;
		public IToken local__1_binop_case1;
		public IToken local__1_binop_case2;
		public IToken local__1_binop_case3;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_BINOP_2() { return GetToken(DianaScriptParser.SINGLE_BINOP_2, 0); }
		public BinopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterBinop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitBinop(this);
		}
	}

	[RuleVersion(0)]
	public BinopContext binop() {
		BinopContext _localctx = new BinopContext(Context, State);
		EnterRule(_localctx, 52, RULE_binop);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SINGLE_BINOP_2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 466; _localctx.local__1_binop_case0 = Match(SINGLE_BINOP_2);
				 
				        object tmp__229 ; 
				        CommonToken tmp__228 ; 
				        CommonToken tmp__227 ; 
				        tmp__227 = ( CommonToken ) _localctx.local__1_binop_case0 ; 
				        tmp__228 = ( CommonToken ) _localctx.local__1_binop_case0 ; 
				        tmp__229 = (object) mkop( tmp__227, tmp__228.Text ); 
				        _localctx.result =  tmp__229; 
				      
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; _localctx.local__1_binop_case1 = Match(T__27);
				State = 469; Match(T__7);
				 
				        object tmp__232 ; 
				        string tmp__231 ; 
				        CommonToken tmp__230 ; 
				        tmp__230 = ( CommonToken ) _localctx.local__1_binop_case1 ; 
				        tmp__231 = "notin" ; 
				        tmp__232 = (object) mkop( tmp__230, tmp__231 ); 
				        _localctx.result =  tmp__232; 
				      
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 471; _localctx.local__1_binop_case2 = Match(T__7);
				 
				        object tmp__235 ; 
				        string tmp__234 ; 
				        CommonToken tmp__233 ; 
				        tmp__233 = ( CommonToken ) _localctx.local__1_binop_case2 ; 
				        tmp__234 = "in" ; 
				        tmp__235 = (object) mkop( tmp__233, tmp__234 ); 
				        _localctx.result =  tmp__235; 
				      
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 4);
				{
				State = 473; _localctx.local__1_binop_case3 = Match(T__19);
				 
				        object tmp__238 ; 
				        string tmp__237 ; 
				        CommonToken tmp__236 ; 
				        tmp__236 = ( CommonToken ) _localctx.local__1_binop_case3 ; 
				        tmp__237 = "-" ; 
				        tmp__238 = (object) mkop( tmp__236, tmp__237 ); 
				        _localctx.result =  tmp__238; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotContext : ParserRuleContext {
		public ImmediateAST result;
		public IToken local__1_not_case0;
		public BinContext local__2_not_case0;
		public BinContext local__1_not_case1;
		[System.Diagnostics.DebuggerNonUserCode] public BinContext bin() {
			return GetRuleContext<BinContext>(0);
		}
		public NotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
	}

	[RuleVersion(0)]
	public NotContext not() {
		NotContext _localctx = new NotContext(Context, State);
		EnterRule(_localctx, 54, RULE_not);
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 477; _localctx.local__1_not_case0 = Match(T__27);
				State = 478; _localctx.local__2_not_case0 = bin();
				 
				        ImmediateAST tmp__241 ; 
				        ImmediateAST tmp__240 ; 
				        CommonToken tmp__239 ; 
				        tmp__239 = ( CommonToken ) _localctx.local__1_not_case0 ; 
				        tmp__240 = ( ImmediateAST ) _localctx.local__2_not_case0.result ; 
				        tmp__241 = (ImmediateAST) mkNot( tmp__239, tmp__240 ); 
				        _localctx.result =  tmp__241; 
				      
				}
				break;
			case T__0:
			case T__14:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case STR_4:
			case INT_10:
			case HEX_7:
			case OCT_8:
			case BIN_9:
			case FLOAT_11:
			case NAME_13:
				EnterOuterAlt(_localctx, 2);
				{
				State = 481; _localctx.local__1_not_case1 = bin();
				 
				        ImmediateAST tmp__242 ; 
				        tmp__242 = ( ImmediateAST ) _localctx.local__1_not_case1.result ; 
				        _localctx.result =  tmp__242; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_exprContext : ParserRuleContext {
		public ImmediateAST result;
		public And_exprContext local__1_and_expr_case0;
		public NotContext local__1_and_expr_case1;
		public IToken local__2_and_expr_case0;
		public NotContext local__3_and_expr_case0;
		[System.Diagnostics.DebuggerNonUserCode] public NotContext not() {
			return GetRuleContext<NotContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		public And_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterAnd_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitAnd_expr(this);
		}
	}

	[RuleVersion(0)]
	public And_exprContext and_expr() {
		return and_expr(0);
	}

	private And_exprContext and_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		And_exprContext _localctx = new And_exprContext(Context, _parentState);
		And_exprContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_and_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 487; _localctx.local__1_and_expr_case1 = not();
			 
			        ImmediateAST tmp__247 ; 
			        tmp__247 = ( ImmediateAST ) _localctx.local__1_and_expr_case1.result ; 
			        _localctx.result =  tmp__247; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new And_exprContext(_parentctx, _parentState);
					_localctx.local__1_and_expr_case0 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_and_expr);
					State = 490;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 491; _localctx.local__2_and_expr_case0 = Match(T__28);
					State = 492; _localctx.local__3_and_expr_case0 = not();
					 
					                  ImmediateAST tmp__246 ; 
					                  ImmediateAST tmp__245 ; 
					                  ImmediateAST tmp__244 ; 
					                  CommonToken tmp__243 ; 
					                  tmp__243 = ( CommonToken ) _localctx.local__2_and_expr_case0 ; 
					                  tmp__244 = ( ImmediateAST ) _localctx.local__1_and_expr_case0.result ; 
					                  tmp__245 = ( ImmediateAST ) _localctx.local__3_and_expr_case0.result ; 
					                  tmp__246 = (ImmediateAST) mkAnd( tmp__243, tmp__244, tmp__245 ); 
					                  _localctx.result =  tmp__246; 
					                
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Or_exprContext : ParserRuleContext {
		public ImmediateAST result;
		public Or_exprContext local__1_or_expr_case0;
		public And_exprContext local__1_or_expr_case1;
		public IToken local__2_or_expr_case0;
		public And_exprContext local__3_or_expr_case0;
		[System.Diagnostics.DebuggerNonUserCode] public And_exprContext and_expr() {
			return GetRuleContext<And_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		public Or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterOr_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitOr_expr(this);
		}
	}

	[RuleVersion(0)]
	public Or_exprContext or_expr() {
		return or_expr(0);
	}

	private Or_exprContext or_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Or_exprContext _localctx = new Or_exprContext(Context, _parentState);
		Or_exprContext _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_or_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 501; _localctx.local__1_or_expr_case1 = and_expr(0);
			 
			        ImmediateAST tmp__252 ; 
			        tmp__252 = ( ImmediateAST ) _localctx.local__1_or_expr_case1.result ; 
			        _localctx.result =  tmp__252; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Or_exprContext(_parentctx, _parentState);
					_localctx.local__1_or_expr_case0 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_or_expr);
					State = 504;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 505; _localctx.local__2_or_expr_case0 = Match(T__29);
					State = 506; _localctx.local__3_or_expr_case0 = and_expr(0);
					 
					                  ImmediateAST tmp__251 ; 
					                  ImmediateAST tmp__250 ; 
					                  ImmediateAST tmp__249 ; 
					                  CommonToken tmp__248 ; 
					                  tmp__248 = ( CommonToken ) _localctx.local__2_or_expr_case0 ; 
					                  tmp__249 = ( ImmediateAST ) _localctx.local__1_or_expr_case0.result ; 
					                  tmp__250 = ( ImmediateAST ) _localctx.local__3_or_expr_case0.result ; 
					                  tmp__251 = (ImmediateAST) mkAnd( tmp__248, tmp__249, tmp__250 ); 
					                  _localctx.result =  tmp__251; 
					                
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ImmediateAST result;
		public Gen__seplist_gen__line_wrap__L124_L62__or_exprContext local__1_expr_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist_gen__line_wrap__L124_L62__or_exprContext gen__seplist_gen__line_wrap__L124_L62__or_expr() {
			return GetRuleContext<Gen__seplist_gen__line_wrap__L124_L62__or_exprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; _localctx.local__1_expr_case0 = gen__seplist_gen__line_wrap__L124_L62__or_expr(0);
			 
			        ImmediateAST tmp__254 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__253 ; 
			        tmp__253 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_expr_case0.result ; 
			        tmp__254 = (ImmediateAST) mkPipeline( tmp__253 ); 
			        _localctx.result =  tmp__254; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__seplist_gen__line_wrap__L124_L62__or_exprContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__seplist_gen__line_wrap__L124_L62__or_exprContext local__1_gen__seplist_gen__line_wrap__L124_L62__or_expr_case1;
		public Or_exprContext local__1_gen__seplist_gen__line_wrap__L124_L62__or_expr_case0;
		public Or_exprContext local__3_gen__seplist_gen__line_wrap__L124_L62__or_expr_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Or_exprContext or_expr() {
			return GetRuleContext<Or_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__line_wrap__L124_L62Context gen__line_wrap__L124_L62() {
			return GetRuleContext<Gen__line_wrap__L124_L62Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist_gen__line_wrap__L124_L62__or_exprContext gen__seplist_gen__line_wrap__L124_L62__or_expr() {
			return GetRuleContext<Gen__seplist_gen__line_wrap__L124_L62__or_exprContext>(0);
		}
		public Gen__seplist_gen__line_wrap__L124_L62__or_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__seplist_gen__line_wrap__L124_L62__or_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__seplist_gen__line_wrap__L124_L62__or_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__seplist_gen__line_wrap__L124_L62__or_expr(this);
		}
	}

	[RuleVersion(0)]
	public Gen__seplist_gen__line_wrap__L124_L62__or_exprContext gen__seplist_gen__line_wrap__L124_L62__or_expr() {
		return gen__seplist_gen__line_wrap__L124_L62__or_expr(0);
	}

	private Gen__seplist_gen__line_wrap__L124_L62__or_exprContext gen__seplist_gen__line_wrap__L124_L62__or_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__seplist_gen__line_wrap__L124_L62__or_exprContext _localctx = new Gen__seplist_gen__line_wrap__L124_L62__or_exprContext(Context, _parentState);
		Gen__seplist_gen__line_wrap__L124_L62__or_exprContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_gen__seplist_gen__line_wrap__L124_L62__or_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 518; _localctx.local__1_gen__seplist_gen__line_wrap__L124_L62__or_expr_case0 = or_expr(0);
			 
			        ImmediateAST tmp__256 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__255 ; 
			        tmp__256 = ( ImmediateAST ) _localctx.local__1_gen__seplist_gen__line_wrap__L124_L62__or_expr_case0.result ; 
			        tmp__255 = new System.Collections.Generic.List<ImmediateAST> { tmp__256 }; 
			        _localctx.result =  tmp__255; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 528;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Gen__seplist_gen__line_wrap__L124_L62__or_exprContext(_parentctx, _parentState);
					_localctx.local__1_gen__seplist_gen__line_wrap__L124_L62__or_expr_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_gen__seplist_gen__line_wrap__L124_L62__or_expr);
					State = 521;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 522; gen__line_wrap__L124_L62();
					State = 523; _localctx.local__3_gen__seplist_gen__line_wrap__L124_L62__or_expr_case1 = or_expr(0);
					 
					                  System.Collections.Generic.List<ImmediateAST> tmp__259 ; 
					                  ImmediateAST tmp__258 ; 
					                  System.Collections.Generic.List<ImmediateAST> tmp__257 ; 
					                  tmp__257 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__seplist_gen__line_wrap__L124_L62__or_expr_case1.result ; 
					                  tmp__258 = ( ImmediateAST ) _localctx.local__3_gen__seplist_gen__line_wrap__L124_L62__or_expr_case1.result ; 
					                  tmp__259 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__257, tmp__258 ); 
					                  _localctx.result =  tmp__259; 
					                
					}
					} 
				}
				State = 530;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Gen__line_wrap__L124_L62Context : ParserRuleContext {
		public CommonToken result;
		public IToken local__2_gen__line_wrap__L124_L62_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext[] gen__optional_NEWLINE() {
			return GetRuleContexts<Gen__optional_NEWLINEContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE(int i) {
			return GetRuleContext<Gen__optional_NEWLINEContext>(i);
		}
		public Gen__line_wrap__L124_L62Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__line_wrap__L124_L62; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__line_wrap__L124_L62(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__line_wrap__L124_L62(this);
		}
	}

	[RuleVersion(0)]
	public Gen__line_wrap__L124_L62Context gen__line_wrap__L124_L62() {
		Gen__line_wrap__L124_L62Context _localctx = new Gen__line_wrap__L124_L62Context(Context, State);
		EnterRule(_localctx, 64, RULE_gen__line_wrap__L124_L62);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; gen__optional_NEWLINE();
			State = 532; _localctx.local__2_gen__line_wrap__L124_L62_case0 = Match(T__30);
			State = 533; gen__optional_NEWLINE();
			 
			        CommonToken tmp__260 ; 
			        tmp__260 = ( CommonToken ) _localctx.local__2_gen__line_wrap__L124_L62_case0 ; 
			        _localctx.result =  tmp__260; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__filter_stmt__gen__or___L59__NEWLINEContext local__1_block_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__filter_stmt__gen__or___L59__NEWLINEContext gen__filter_stmt__gen__or___L59__NEWLINE() {
			return GetRuleContext<Gen__filter_stmt__gen__or___L59__NEWLINEContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; _localctx.local__1_block_case0 = gen__filter_stmt__gen__or___L59__NEWLINE(0);
			 
			        System.Collections.Generic.List<ImmediateAST> tmp__261 ; 
			        tmp__261 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_block_case0.result ; 
			        _localctx.result =  tmp__261; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__filter_stmt__gen__or___L59__NEWLINEContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__filter_stmt__gen__or___L59__NEWLINEContext local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case0;
		public Gen__filter_stmt__gen__or___L59__NEWLINEContext local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case1;
		public StmtContext local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case2;
		public StmtContext local__2_gen__filter_stmt__gen__or___L59__NEWLINE_case0;
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__or___L59__NEWLINEContext gen__or___L59__NEWLINE() {
			return GetRuleContext<Gen__or___L59__NEWLINEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__filter_stmt__gen__or___L59__NEWLINEContext gen__filter_stmt__gen__or___L59__NEWLINE() {
			return GetRuleContext<Gen__filter_stmt__gen__or___L59__NEWLINEContext>(0);
		}
		public Gen__filter_stmt__gen__or___L59__NEWLINEContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__filter_stmt__gen__or___L59__NEWLINE; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__filter_stmt__gen__or___L59__NEWLINE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__filter_stmt__gen__or___L59__NEWLINE(this);
		}
	}

	[RuleVersion(0)]
	public Gen__filter_stmt__gen__or___L59__NEWLINEContext gen__filter_stmt__gen__or___L59__NEWLINE() {
		return gen__filter_stmt__gen__or___L59__NEWLINE(0);
	}

	private Gen__filter_stmt__gen__or___L59__NEWLINEContext gen__filter_stmt__gen__or___L59__NEWLINE(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__filter_stmt__gen__or___L59__NEWLINEContext _localctx = new Gen__filter_stmt__gen__or___L59__NEWLINEContext(Context, _parentState);
		Gen__filter_stmt__gen__or___L59__NEWLINEContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_gen__filter_stmt__gen__or___L59__NEWLINE, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 540; _localctx.local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case2 = stmt();
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__268 ; 
				        ImmediateAST tmp__267 ; 
				        System.Collections.Generic.List<ImmediateAST> tmp__266 ; 
				        tmp__266 = (System.Collections.Generic.List<ImmediateAST>) empty<ImmediateAST>(  ); 
				        tmp__267 = ( ImmediateAST ) _localctx.local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case2.result ; 
				        tmp__268 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__266, tmp__267 ); 
				        _localctx.result =  tmp__268; 
				      
				}
				break;
			case 2:
				{
				State = 543; gen__or___L59__NEWLINE();
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__269 ; 
				        tmp__269 = (System.Collections.Generic.List<ImmediateAST>) empty<ImmediateAST>(  ); 
				        _localctx.result =  tmp__269; 
				      
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 558;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 556;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new Gen__filter_stmt__gen__or___L59__NEWLINEContext(_parentctx, _parentState);
						_localctx.local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case0 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen__filter_stmt__gen__or___L59__NEWLINE);
						State = 548;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 549; _localctx.local__2_gen__filter_stmt__gen__or___L59__NEWLINE_case0 = stmt();
						 
						                  System.Collections.Generic.List<ImmediateAST> tmp__264 ; 
						                  ImmediateAST tmp__263 ; 
						                  System.Collections.Generic.List<ImmediateAST> tmp__262 ; 
						                  tmp__262 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case0.result ; 
						                  tmp__263 = ( ImmediateAST ) _localctx.local__2_gen__filter_stmt__gen__or___L59__NEWLINE_case0.result ; 
						                  tmp__264 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__262, tmp__263 ); 
						                  _localctx.result =  tmp__264; 
						                
						}
						break;
					case 2:
						{
						_localctx = new Gen__filter_stmt__gen__or___L59__NEWLINEContext(_parentctx, _parentState);
						_localctx.local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_gen__filter_stmt__gen__or___L59__NEWLINE);
						State = 552;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 553; gen__or___L59__NEWLINE();
						 
						                  System.Collections.Generic.List<ImmediateAST> tmp__265 ; 
						                  tmp__265 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__filter_stmt__gen__or___L59__NEWLINE_case1.result ; 
						                  _localctx.result =  tmp__265; 
						                
						}
						break;
					}
					} 
				}
				State = 560;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Gen__or___L59__NEWLINEContext : ParserRuleContext {
		public int result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE_17() { return GetToken(DianaScriptParser.NEWLINE_17, 0); }
		public Gen__or___L59__NEWLINEContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__or___L59__NEWLINE; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__or___L59__NEWLINE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__or___L59__NEWLINE(this);
		}
	}

	[RuleVersion(0)]
	public Gen__or___L59__NEWLINEContext gen__or___L59__NEWLINE() {
		Gen__or___L59__NEWLINEContext _localctx = new Gen__or___L59__NEWLINEContext(Context, State);
		EnterRule(_localctx, 70, RULE_gen__or___L59__NEWLINE);
		try {
			State = 565;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__31:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; Match(T__31);
				 
				        int tmp__270 ; 
				        tmp__270 = 0 ; 
				        _localctx.result =  tmp__270; 
				      
				}
				break;
			case NEWLINE_17:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563; Match(NEWLINE_17);
				 
				        int tmp__271 ; 
				        tmp__271 = 0 ; 
				        _localctx.result =  tmp__271; 
				      
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LhsContext : ParserRuleContext {
		public ImmediateAST result;
		public IToken local__1_lhs_case0;
		public AtomContext local__1_lhs_case1;
		public IToken local__2_lhs_case1;
		public ExprContext local__4_lhs_case1;
		public AtomContext local__1_lhs_case2;
		public IToken local__2_lhs_case2;
		public IToken local__3_lhs_case2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_13() { return GetToken(DianaScriptParser.NAME_13, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LhsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lhs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterLhs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitLhs(this);
		}
	}

	[RuleVersion(0)]
	public LhsContext lhs() {
		LhsContext _localctx = new LhsContext(Context, State);
		EnterRule(_localctx, 72, RULE_lhs);
		try {
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 567; _localctx.local__1_lhs_case0 = Match(NAME_13);
				 
				        ImmediateAST tmp__274 ; 
				        CommonToken tmp__273 ; 
				        CommonToken tmp__272 ; 
				        tmp__272 = ( CommonToken ) _localctx.local__1_lhs_case0 ; 
				        tmp__273 = ( CommonToken ) _localctx.local__1_lhs_case0 ; 
				        tmp__274 = (ImmediateAST) mkVar( tmp__272, tmp__273.Text ); 
				        _localctx.result =  tmp__274; 
				      
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 569; _localctx.local__1_lhs_case1 = atom(0);
				State = 570; _localctx.local__2_lhs_case1 = Match(T__13);
				State = 571; Match(T__14);
				State = 572; _localctx.local__4_lhs_case1 = expr();
				State = 573; Match(T__15);
				 
				        ImmediateAST tmp__278 ; 
				        ImmediateAST tmp__277 ; 
				        ImmediateAST tmp__276 ; 
				        CommonToken tmp__275 ; 
				        tmp__275 = ( CommonToken ) _localctx.local__2_lhs_case1 ; 
				        tmp__276 = ( ImmediateAST ) _localctx.local__1_lhs_case1.result ; 
				        tmp__277 = ( ImmediateAST ) _localctx.local__4_lhs_case1.result ; 
				        tmp__278 = (ImmediateAST) mkOGet( tmp__275, tmp__276, tmp__277 ); 
				        _localctx.result =  tmp__278; 
				      
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 576; _localctx.local__1_lhs_case2 = atom(0);
				State = 577; _localctx.local__2_lhs_case2 = Match(T__13);
				State = 578; _localctx.local__3_lhs_case2 = Match(NAME_13);
				 
				        ImmediateAST tmp__285 ; 
				        ImmediateAST tmp__284 ; 
				        DObj tmp__283 ; 
				        CommonToken tmp__282 ; 
				        CommonToken tmp__281 ; 
				        ImmediateAST tmp__280 ; 
				        CommonToken tmp__279 ; 
				        tmp__279 = ( CommonToken ) _localctx.local__2_lhs_case2 ; 
				        tmp__280 = ( ImmediateAST ) _localctx.local__1_lhs_case2.result ; 
				        tmp__281 = ( CommonToken ) _localctx.local__3_lhs_case2 ; 
				        tmp__282 = ( CommonToken ) _localctx.local__3_lhs_case2 ; 
				        tmp__283 = (DObj) mkstr( tmp__282.Text ); 
				        tmp__284 = (ImmediateAST) mkVal( tmp__281, tmp__283 ); 
				        tmp__285 = (ImmediateAST) mkOGet( tmp__279, tmp__280, tmp__284 ); 
				        _localctx.result =  tmp__285; 
				      
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoContext : ParserRuleContext {
		public CommonToken result;
		public IToken local__2_do_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE() {
			return GetRuleContext<Gen__optional_NEWLINEContext>(0);
		}
		public DoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterDo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitDo(this);
		}
	}

	[RuleVersion(0)]
	public DoContext @do() {
		DoContext _localctx = new DoContext(Context, State);
		EnterRule(_localctx, 74, RULE_do);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; gen__optional_NEWLINE();
			State = 584; _localctx.local__2_do_case0 = Match(T__11);
			 
			        CommonToken tmp__286 ; 
			        tmp__286 = ( CommonToken ) _localctx.local__2_do_case0 ; 
			        _localctx.result =  tmp__286; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenContext : ParserRuleContext {
		public CommonToken result;
		public IToken local__2_then_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE() {
			return GetRuleContext<Gen__optional_NEWLINEContext>(0);
		}
		public ThenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_then; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterThen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitThen(this);
		}
	}

	[RuleVersion(0)]
	public ThenContext then() {
		ThenContext _localctx = new ThenContext(Context, State);
		EnterRule(_localctx, 76, RULE_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; gen__optional_NEWLINE();
			State = 588; _localctx.local__2_then_case0 = Match(T__32);
			 
			        CommonToken tmp__287 ; 
			        tmp__287 = ( CommonToken ) _localctx.local__2_then_case0 ; 
			        _localctx.result =  tmp__287; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__blockOf_doContext : ParserRuleContext {
		public ImmediateAST result;
		public DoContext local__1_gen__blockOf_do_case0;
		public BlockContext local__2_gen__blockOf_do_case0;
		[System.Diagnostics.DebuggerNonUserCode] public DoContext @do() {
			return GetRuleContext<DoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Gen__blockOf_doContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__blockOf_do; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__blockOf_do(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__blockOf_do(this);
		}
	}

	[RuleVersion(0)]
	public Gen__blockOf_doContext gen__blockOf_do() {
		Gen__blockOf_doContext _localctx = new Gen__blockOf_doContext(Context, State);
		EnterRule(_localctx, 78, RULE_gen__blockOf_do);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 591; _localctx.local__1_gen__blockOf_do_case0 = @do();
			State = 592; _localctx.local__2_gen__blockOf_do_case0 = block();
			 
			        ImmediateAST tmp__290 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__289 ; 
			        CommonToken tmp__288 ; 
			        tmp__288 = ( CommonToken ) _localctx.local__1_gen__blockOf_do_case0.result ; 
			        tmp__289 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_gen__blockOf_do_case0.result ; 
			        tmp__290 = (ImmediateAST) mkBlock( tmp__288, tmp__289 ); 
			        _localctx.result =  tmp__290; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public string result;
		public IToken local__1_name_case0;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_13() { return GetToken(DianaScriptParser.NAME_13, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 80, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; _localctx.local__1_name_case0 = Match(NAME_13);
			 
			        CommonToken tmp__291 ; 
			        tmp__291 = ( CommonToken ) _localctx.local__1_name_case0 ; 
			        _localctx.result =  tmp__291.Text; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifBlockContext : ParserRuleContext {
		public (ImmediateAST, ImmediateAST) result;
		public ExprContext local__1_elifBlock_case0;
		public Gen__blockOf_thenContext local__2_elifBlock_case0;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__blockOf_thenContext gen__blockOf_then() {
			return GetRuleContext<Gen__blockOf_thenContext>(0);
		}
		public ElifBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterElifBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitElifBlock(this);
		}
	}

	[RuleVersion(0)]
	public ElifBlockContext elifBlock() {
		ElifBlockContext _localctx = new ElifBlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_elifBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; _localctx.local__1_elifBlock_case0 = expr();
			State = 599; _localctx.local__2_elifBlock_case0 = gen__blockOf_then();
			 
			        ImmediateAST tmp__294 ; 
			        ImmediateAST tmp__293 ; 
			        (ImmediateAST, ImmediateAST) tmp__292 ; 
			        tmp__293 = ( ImmediateAST ) _localctx.local__1_elifBlock_case0.result ; 
			        tmp__294 = ( ImmediateAST ) _localctx.local__2_elifBlock_case0.result ; 
			        tmp__292 = ( tmp__293 , tmp__294 ); 
			        _localctx.result =  tmp__292; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__blockOf_thenContext : ParserRuleContext {
		public ImmediateAST result;
		public ThenContext local__1_gen__blockOf_then_case0;
		public BlockContext local__2_gen__blockOf_then_case0;
		[System.Diagnostics.DebuggerNonUserCode] public ThenContext then() {
			return GetRuleContext<ThenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Gen__blockOf_thenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__blockOf_then; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__blockOf_then(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__blockOf_then(this);
		}
	}

	[RuleVersion(0)]
	public Gen__blockOf_thenContext gen__blockOf_then() {
		Gen__blockOf_thenContext _localctx = new Gen__blockOf_thenContext(Context, State);
		EnterRule(_localctx, 84, RULE_gen__blockOf_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; _localctx.local__1_gen__blockOf_then_case0 = then();
			State = 603; _localctx.local__2_gen__blockOf_then_case0 = block();
			 
			        ImmediateAST tmp__297 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__296 ; 
			        CommonToken tmp__295 ; 
			        tmp__295 = ( CommonToken ) _localctx.local__1_gen__blockOf_then_case0.result ; 
			        tmp__296 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_gen__blockOf_then_case0.result ; 
			        tmp__297 = (ImmediateAST) mkBlock( tmp__295, tmp__296 ); 
			        _localctx.result =  tmp__297; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lhs_seqContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Lhs_seqContext local__1_lhs_seq_case1;
		public LhsContext local__2_lhs_seq_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Lhs_seqContext lhs_seq() {
			return GetRuleContext<Lhs_seqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LhsContext lhs() {
			return GetRuleContext<LhsContext>(0);
		}
		public Lhs_seqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lhs_seq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterLhs_seq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitLhs_seq(this);
		}
	}

	[RuleVersion(0)]
	public Lhs_seqContext lhs_seq() {
		return lhs_seq(0);
	}

	private Lhs_seqContext lhs_seq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Lhs_seqContext _localctx = new Lhs_seqContext(Context, _parentState);
		Lhs_seqContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_lhs_seq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			 
			        System.Collections.Generic.List<ImmediateAST> tmp__298 ; 
			        tmp__298 = (System.Collections.Generic.List<ImmediateAST>) empty<ImmediateAST>(  ); 
			        _localctx.result =  tmp__298; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 616;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Lhs_seqContext(_parentctx, _parentState);
					_localctx.local__1_lhs_seq_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_lhs_seq);
					State = 609;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 610; _localctx.local__2_lhs_seq_case1 = lhs();
					State = 611; Match(T__3);
					 
					                  System.Collections.Generic.List<ImmediateAST> tmp__301 ; 
					                  ImmediateAST tmp__300 ; 
					                  System.Collections.Generic.List<ImmediateAST> tmp__299 ; 
					                  tmp__299 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_lhs_seq_case1.result ; 
					                  tmp__300 = ( ImmediateAST ) _localctx.local__2_lhs_seq_case1.result ; 
					                  tmp__301 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__299, tmp__300 ); 
					                  _localctx.result =  tmp__301; 
					                
					}
					} 
				}
				State = 618;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StartContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__nullable_gen__seplist_NEWLINE__stmtContext local__2_start_case0;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext[] gen__optional_NEWLINE() {
			return GetRuleContexts<Gen__optional_NEWLINEContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Gen__optional_NEWLINEContext gen__optional_NEWLINE(int i) {
			return GetRuleContext<Gen__optional_NEWLINEContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DianaScriptParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen__nullable_gen__seplist_NEWLINE__stmtContext gen__nullable_gen__seplist_NEWLINE__stmt() {
			return GetRuleContext<Gen__nullable_gen__seplist_NEWLINE__stmtContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 88, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; gen__optional_NEWLINE();
			State = 620; _localctx.local__2_start_case0 = gen__nullable_gen__seplist_NEWLINE__stmt();
			State = 621; gen__optional_NEWLINE();
			State = 622; Match(Eof);
			 
			        System.Collections.Generic.List<ImmediateAST> tmp__302 ; 
			        tmp__302 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__2_start_case0.result ; 
			        _localctx.result =  tmp__302; 
			      
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__nullable_gen__seplist_NEWLINE__stmtContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__seplist_NEWLINE__stmtContext local__1_gen__nullable_gen__seplist_NEWLINE__stmt_case1;
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist_NEWLINE__stmtContext gen__seplist_NEWLINE__stmt() {
			return GetRuleContext<Gen__seplist_NEWLINE__stmtContext>(0);
		}
		public Gen__nullable_gen__seplist_NEWLINE__stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__nullable_gen__seplist_NEWLINE__stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__nullable_gen__seplist_NEWLINE__stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__nullable_gen__seplist_NEWLINE__stmt(this);
		}
	}

	[RuleVersion(0)]
	public Gen__nullable_gen__seplist_NEWLINE__stmtContext gen__nullable_gen__seplist_NEWLINE__stmt() {
		Gen__nullable_gen__seplist_NEWLINE__stmtContext _localctx = new Gen__nullable_gen__seplist_NEWLINE__stmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_gen__nullable_gen__seplist_NEWLINE__stmt);
		try {
			State = 629;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__303 ; 
				        tmp__303 = (System.Collections.Generic.List<ImmediateAST>) empty<ImmediateAST>(  ); 
				        _localctx.result =  tmp__303; 
				      
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 626; _localctx.local__1_gen__nullable_gen__seplist_NEWLINE__stmt_case1 = gen__seplist_NEWLINE__stmt(0);
				 
				        System.Collections.Generic.List<ImmediateAST> tmp__304 ; 
				        tmp__304 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__nullable_gen__seplist_NEWLINE__stmt_case1.result ; 
				        _localctx.result =  tmp__304; 
				      
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Gen__seplist_NEWLINE__stmtContext : ParserRuleContext {
		public System.Collections.Generic.List<ImmediateAST> result;
		public Gen__seplist_NEWLINE__stmtContext local__1_gen__seplist_NEWLINE__stmt_case1;
		public StmtContext local__1_gen__seplist_NEWLINE__stmt_case0;
		public StmtContext local__3_gen__seplist_NEWLINE__stmt_case1;
		[System.Diagnostics.DebuggerNonUserCode] public StmtContext stmt() {
			return GetRuleContext<StmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE_17() { return GetToken(DianaScriptParser.NEWLINE_17, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Gen__seplist_NEWLINE__stmtContext gen__seplist_NEWLINE__stmt() {
			return GetRuleContext<Gen__seplist_NEWLINE__stmtContext>(0);
		}
		public Gen__seplist_NEWLINE__stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gen__seplist_NEWLINE__stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.EnterGen__seplist_NEWLINE__stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDianaScriptListener typedListener = listener as IDianaScriptListener;
			if (typedListener != null) typedListener.ExitGen__seplist_NEWLINE__stmt(this);
		}
	}

	[RuleVersion(0)]
	public Gen__seplist_NEWLINE__stmtContext gen__seplist_NEWLINE__stmt() {
		return gen__seplist_NEWLINE__stmt(0);
	}

	private Gen__seplist_NEWLINE__stmtContext gen__seplist_NEWLINE__stmt(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Gen__seplist_NEWLINE__stmtContext _localctx = new Gen__seplist_NEWLINE__stmtContext(Context, _parentState);
		Gen__seplist_NEWLINE__stmtContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_gen__seplist_NEWLINE__stmt, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 632; _localctx.local__1_gen__seplist_NEWLINE__stmt_case0 = stmt();
			 
			        ImmediateAST tmp__306 ; 
			        System.Collections.Generic.List<ImmediateAST> tmp__305 ; 
			        tmp__306 = ( ImmediateAST ) _localctx.local__1_gen__seplist_NEWLINE__stmt_case0.result ; 
			        tmp__305 = new System.Collections.Generic.List<ImmediateAST> { tmp__306 }; 
			        _localctx.result =  tmp__305; 
			      
			}
			Context.Stop = TokenStream.LT(-1);
			State = 642;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Gen__seplist_NEWLINE__stmtContext(_parentctx, _parentState);
					_localctx.local__1_gen__seplist_NEWLINE__stmt_case1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_gen__seplist_NEWLINE__stmt);
					State = 635;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 636; Match(NEWLINE_17);
					State = 637; _localctx.local__3_gen__seplist_NEWLINE__stmt_case1 = stmt();
					 
					                  System.Collections.Generic.List<ImmediateAST> tmp__309 ; 
					                  ImmediateAST tmp__308 ; 
					                  System.Collections.Generic.List<ImmediateAST> tmp__307 ; 
					                  tmp__307 = ( System.Collections.Generic.List<ImmediateAST> ) _localctx.local__1_gen__seplist_NEWLINE__stmt_case1.result ; 
					                  tmp__308 = ( ImmediateAST ) _localctx.local__3_gen__seplist_NEWLINE__stmt_case1.result ; 
					                  tmp__309 = (System.Collections.Generic.List<ImmediateAST>) append<ImmediateAST>( tmp__307, tmp__308 ); 
					                  _localctx.result =  tmp__309; 
					                
					}
					} 
				}
				State = 644;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return gen__filter_option__NEWLINE_sempred((Gen__filter_option__NEWLINEContext)_localctx, predIndex);
		case 4: return gen__seplist__L44__expr_sempred((Gen__seplist__L44__exprContext)_localctx, predIndex);
		case 5: return atom_sempred((AtomContext)_localctx, predIndex);
		case 9: return gen__seplist__L44__name_sempred((Gen__seplist__L44__nameContext)_localctx, predIndex);
		case 13: return gen__list_gen__snd_elif__elifBlock_sempred((Gen__list_gen__snd_elif__elifBlockContext)_localctx, predIndex);
		case 16: return gen___closelist__L44__pair_sempred((Gen___closelist__L44__pairContext)_localctx, predIndex);
		case 18: return gen___closelist__L44__expr_sempred((Gen___closelist__L44__exprContext)_localctx, predIndex);
		case 23: return binseq_sempred((BinseqContext)_localctx, predIndex);
		case 28: return and_expr_sempred((And_exprContext)_localctx, predIndex);
		case 29: return or_expr_sempred((Or_exprContext)_localctx, predIndex);
		case 31: return gen__seplist_gen__line_wrap__L124_L62__or_expr_sempred((Gen__seplist_gen__line_wrap__L124_L62__or_exprContext)_localctx, predIndex);
		case 34: return gen__filter_stmt__gen__or___L59__NEWLINE_sempred((Gen__filter_stmt__gen__or___L59__NEWLINEContext)_localctx, predIndex);
		case 43: return lhs_seq_sempred((Lhs_seqContext)_localctx, predIndex);
		case 46: return gen__seplist_NEWLINE__stmt_sempred((Gen__seplist_NEWLINE__stmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool gen__filter_option__NEWLINE_sempred(Gen__filter_option__NEWLINEContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}
	private bool gen__seplist__L44__expr_sempred(Gen__seplist__L44__exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool atom_sempred(AtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 22);
		case 4: return Precpred(Context, 21);
		case 5: return Precpred(Context, 20);
		}
		return true;
	}
	private bool gen__seplist__L44__name_sempred(Gen__seplist__L44__nameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return Precpred(Context, 1);
		}
		return true;
	}
	private bool gen__list_gen__snd_elif__elifBlock_sempred(Gen__list_gen__snd_elif__elifBlockContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool gen___closelist__L44__pair_sempred(Gen___closelist__L44__pairContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 3);
		}
		return true;
	}
	private bool gen___closelist__L44__expr_sempred(Gen___closelist__L44__exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		}
		return true;
	}
	private bool binseq_sempred(BinseqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool and_expr_sempred(And_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 2);
		}
		return true;
	}
	private bool or_expr_sempred(Or_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 2);
		}
		return true;
	}
	private bool gen__seplist_gen__line_wrap__L124_L62__or_expr_sempred(Gen__seplist_gen__line_wrap__L124_L62__or_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool gen__filter_stmt__gen__or___L59__NEWLINE_sempred(Gen__filter_stmt__gen__or___L59__NEWLINEContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 4);
		case 19: return Precpred(Context, 3);
		}
		return true;
	}
	private bool lhs_seq_sempred(Lhs_seqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool gen__seplist_NEWLINE__stmt_sempred(Gen__seplist_NEWLINE__stmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '.', '\x288', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x8B', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x93', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x9C', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x9F', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\xA9', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xAF', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xBA', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xBD', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x116', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', '\x129', '\n', '\a', '\f', '\a', '\xE', '\a', 
		'\x12C', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x136', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\x13C', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\x147', '\n', '\v', '\f', '\v', '\xE', '\v', '\x14A', '\v', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x150', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x15A', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\x164', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x167', '\v', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x176', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x186', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x189', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x194', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x1A4', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x1A7', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x1B6', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', 
		'\x19', '\x1C4', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x1C7', '\v', 
		'\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x1D3', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1DE', '\n', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1E7', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x1F2', '\n', 
		'\x1E', '\f', '\x1E', '\xE', '\x1E', '\x1F5', '\v', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x200', '\n', 
		'\x1F', '\f', '\x1F', '\xE', '\x1F', '\x203', '\v', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', 
		'\x211', '\n', '!', '\f', '!', '\xE', '!', '\x214', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x225', '\n', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\a', '$', '\x22F', '\n', '$', '\f', '$', '\xE', '$', 
		'\x232', '\v', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', 
		'%', '\x238', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x248', '\n', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\a', '-', '\x269', '\n', '-', '\f', '-', '\xE', '-', 
		'\x26C', '\v', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', 
		'/', '\x278', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\a', '\x30', '\x283', '\n', '\x30', '\f', '\x30', '\xE', 
		'\x30', '\x286', '\v', '\x30', '\x3', '\x30', '\x2', '\x10', '\x4', '\n', 
		'\f', '\x14', '\x1C', '\"', '&', '\x30', ':', '<', '@', '\x46', 'X', '^', 
		'\x31', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '\x2', '\x2', '\x2', '\x29D', '\x2', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x92', '\x3', '\x2', '\x2', '\x2', '\x6', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\xAE', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\xB0', '\x3', '\x2', '\x2', '\x2', '\f', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x10', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x151', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x168', '\x3', '\x2', '\x2', '\x2', ' ', '\x16C', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x175', '\x3', '\x2', '\x2', '\x2', '$', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x1A8', '\x3', '\x2', '\x2', '\x2', '*', '\x1AD', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x1B5', '\x3', '\x2', '\x2', '\x2', '.', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x1C8', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1D2', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1E8', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1F6', '\x3', '\x2', '\x2', '\x2', '>', '\x204', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x207', '\x3', '\x2', '\x2', '\x2', '\x42', '\x215', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x224', '\x3', '\x2', '\x2', '\x2', 'H', '\x237', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x247', '\x3', '\x2', '\x2', '\x2', 'L', '\x249', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x251', '\x3', '\x2', '\x2', '\x2', 'R', '\x255', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x258', '\x3', '\x2', '\x2', '\x2', 'V', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x26D', '\x3', '\x2', '\x2', '\x2', '\\', '\x277', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x279', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		',', '\x2', '\x2', '\x61', '\x62', '\a', '\x3', '\x2', '\x2', '\x62', 
		'\x63', '\x5', '\x4', '\x3', '\x2', '\x63', '\x64', '\a', '\x4', '\x2', 
		'\x2', '\x64', '\x65', '\b', '\x2', '\x1', '\x2', '\x65', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x5', '\x2', '\x2', 'g', 'h', 
		'\a', ',', '\x2', '\x2', 'h', 'i', '\a', '\x6', '\x2', '\x2', 'i', 'j', 
		'\x5', '>', ' ', '\x2', 'j', 'k', '\b', '\x2', '\x1', '\x2', 'k', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x5', 'X', '-', '\x2', 'm', 'n', 
		'\x5', '>', ' ', '\x2', 'n', 'o', '\b', '\x2', '\x1', '\x2', 'o', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\a', '\x2', '\x2', 'q', 'r', 
		'\x5', '\x44', '#', '\x2', 'r', 's', '\a', '\b', '\x2', '\x2', 's', 't', 
		'\b', '\x2', '\x1', '\x2', 't', '\x8B', '\x3', '\x2', '\x2', '\x2', 'u', 
		'v', '\a', '\t', '\x2', '\x2', 'v', 'w', '\a', ',', '\x2', '\x2', 'w', 
		'x', '\a', '\n', '\x2', '\x2', 'x', 'y', '\x5', '>', ' ', '\x2', 'y', 
		'z', '\x5', 'P', ')', '\x2', 'z', '{', '\a', '\b', '\x2', '\x2', '{', 
		'|', '\b', '\x2', '\x1', '\x2', '|', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\a', '\v', '\x2', '\x2', '~', '\x8B', '\b', '\x2', '\x1', '\x2', 
		'\x7F', '\x80', '\a', '\f', '\x2', '\x2', '\x80', '\x8B', '\b', '\x2', 
		'\x1', '\x2', '\x81', '\x82', '\a', '\r', '\x2', '\x2', '\x82', '\x83', 
		'\x5', '>', ' ', '\x2', '\x83', '\x84', '\b', '\x2', '\x1', '\x2', '\x84', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\a', '\r', '\x2', 
		'\x2', '\x86', '\x8B', '\b', '\x2', '\x1', '\x2', '\x87', '\x88', '\x5', 
		'\x32', '\x1A', '\x2', '\x88', '\x89', '\b', '\x2', '\x1', '\x2', '\x89', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x66', '\x3', '\x2', '\x2', '\x2', '\x8A', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', 'p', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x8A', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8D', '\b', '\x3', '\x1', '\x2', '\x8D', '\x8E', '\x5', '\x6', 
		'\x4', '\x2', '\x8E', '\x8F', '\b', '\x3', '\x1', '\x2', '\x8F', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '.', '\x2', '\x2', '\x91', 
		'\x93', '\b', '\x3', '\x1', '\x2', '\x92', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x95', '\f', '\x6', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '\x6', '\x4', '\x2', '\x96', '\x97', '\b', '\x3', '\x1', 
		'\x2', '\x97', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\f', 
		'\x5', '\x2', '\x2', '\x99', '\x9A', '\a', '.', '\x2', '\x2', '\x9A', 
		'\x9C', '\b', '\x3', '\x1', '\x2', '\x9B', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\a', 
		',', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\b', '\x5', '\x2', '\xA2', 
		'\xA3', '\b', '\x4', '\x1', '\x2', '\xA3', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\a', '\xE', '\x2', '\x2', '\xA5', '\xA6', '\x5', 
		'>', ' ', '\x2', '\xA6', '\xA7', '\b', '\x4', '\x1', '\x2', '\xA7', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA9', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAF', '\b', '\x5', '\x1', '\x2', '\xAB', '\xAC', 
		'\x5', '\n', '\x6', '\x2', '\xAC', '\xAD', '\b', '\x5', '\x1', '\x2', 
		'\xAD', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAF', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', '\b', '\x6', '\x1', '\x2', 
		'\xB1', '\xB2', '\x5', '>', ' ', '\x2', '\xB2', '\xB3', '\b', '\x6', '\x1', 
		'\x2', '\xB3', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\f', 
		'\x3', '\x2', '\x2', '\xB5', '\xB6', '\a', '\xF', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', '>', ' ', '\x2', '\xB7', '\xB8', '\b', '\x6', '\x1', '\x2', 
		'\xB8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\v', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xBF', '\b', '\a', '\x1', '\x2', '\xBF', '\xC0', 
		'\a', '\x11', '\x2', '\x2', '\xC0', '\xC1', '\x5', '$', '\x13', '\x2', 
		'\xC1', '\xC2', '\a', '\x12', '\x2', '\x2', '\xC2', '\xC3', '\b', '\a', 
		'\x1', '\x2', '\xC3', '\x116', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', 
		'\a', '\x13', '\x2', '\x2', '\xC5', '\xC6', '\x5', '$', '\x13', '\x2', 
		'\xC6', '\xC7', '\x5', ',', '\x17', '\x2', '\xC7', '\xC8', '\a', '\x14', 
		'\x2', '\x2', '\xC8', '\xC9', '\b', '\a', '\x1', '\x2', '\xC9', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x3', '\x2', '\x2', 
		'\xCB', '\xCC', '\x5', ' ', '\x11', '\x2', '\xCC', '\xCD', '\x5', ',', 
		'\x17', '\x2', '\xCD', '\xCE', '\a', '\x4', '\x2', '\x2', '\xCE', '\xCF', 
		'\b', '\a', '\x1', '\x2', '\xCF', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD1', '\a', '&', '\x2', '\x2', '\xD1', '\x116', '\b', '\a', 
		'\x1', '\x2', '\xD2', '\xD3', '\a', '\'', '\x2', '\x2', '\xD3', '\x116', 
		'\b', '\a', '\x1', '\x2', '\xD4', '\xD5', '\a', '(', '\x2', '\x2', '\xD5', 
		'\x116', '\b', '\a', '\x1', '\x2', '\xD6', '\xD7', '\a', ')', '\x2', '\x2', 
		'\xD7', '\x116', '\b', '\a', '\x1', '\x2', '\xD8', '\xD9', '\a', '*', 
		'\x2', '\x2', '\xD9', '\x116', '\b', '\a', '\x1', '\x2', '\xDA', '\xDB', 
		'\a', '+', '\x2', '\x2', '\xDB', '\x116', '\b', '\a', '\x1', '\x2', '\xDC', 
		'\xDD', '\a', '\x15', '\x2', '\x2', '\xDD', '\x116', '\b', '\a', '\x1', 
		'\x2', '\xDE', '\xDF', '\a', ',', '\x2', '\x2', '\xDF', '\x116', '\b', 
		'\a', '\x1', '\x2', '\xE0', '\xE1', '\a', '\x16', '\x2', '\x2', '\xE1', 
		'\xE2', '\x5', '\f', '\a', '\n', '\xE2', '\xE3', '\b', '\a', '\x1', '\x2', 
		'\xE3', '\x116', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x17', 
		'\x2', '\x2', '\xE5', '\xE6', '\x5', '\f', '\a', '\t', '\xE6', '\xE7', 
		'\b', '\a', '\x1', '\x2', '\xE7', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE9', '\a', '\x18', '\x2', '\x2', '\xE9', '\xEA', '\x5', '>', 
		' ', '\x2', '\xEA', '\xEB', '\x5', 'N', '(', '\x2', '\xEB', '\xEC', '\x5', 
		'\x44', '#', '\x2', '\xEC', '\xED', '\a', '\b', '\x2', '\x2', '\xED', 
		'\xEE', '\b', '\a', '\x1', '\x2', '\xEE', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\a', '\x18', '\x2', '\x2', '\xF0', '\xF1', '\x5', 
		'>', ' ', '\x2', '\xF1', '\xF2', '\x5', 'N', '(', '\x2', '\xF2', '\xF3', 
		'\x5', '\x44', '#', '\x2', '\xF3', '\xF4', '\x5', '\x1A', '\xE', '\x2', 
		'\xF4', '\xF5', '\x5', '\x16', '\f', '\x2', '\xF5', '\xF6', '\a', '\b', 
		'\x2', '\x2', '\xF6', '\xF7', '\b', '\a', '\x1', '\x2', '\xF7', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x19', '\x2', '\x2', 
		'\xF9', '\xFA', '\x5', 'R', '*', '\x2', '\xFA', '\xFB', '\a', '\x13', 
		'\x2', '\x2', '\xFB', '\xFC', '\x5', '\x12', '\n', '\x2', '\xFC', '\xFD', 
		'\a', '\x14', '\x2', '\x2', '\xFD', '\xFE', '\x5', '\x44', '#', '\x2', 
		'\xFE', '\xFF', '\a', '\b', '\x2', '\x2', '\xFF', '\x100', '\b', '\a', 
		'\x1', '\x2', '\x100', '\x116', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\a', '\x19', '\x2', '\x2', '\x102', '\x103', '\a', '\x13', '\x2', '\x2', 
		'\x103', '\x104', '\x5', '\x12', '\n', '\x2', '\x104', '\x105', '\a', 
		'\x14', '\x2', '\x2', '\x105', '\x106', '\x5', '\x44', '#', '\x2', '\x106', 
		'\x107', '\a', '\b', '\x2', '\x2', '\x107', '\x108', '\b', '\a', '\x1', 
		'\x2', '\x108', '\x116', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\a', '\x13', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x12', '\n', '\x2', 
		'\x10B', '\x10C', '\a', '\x14', '\x2', '\x2', '\x10C', '\x10D', '\a', 
		'\x1A', '\x2', '\x2', '\x10D', '\x10E', '\x5', '\xE', '\b', '\x2', '\x10E', 
		'\x10F', '\b', '\a', '\x1', '\x2', '\x10F', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x111', '\a', ',', '\x2', '\x2', '\x111', '\x112', '\a', 
		'\x1A', '\x2', '\x2', '\x112', '\x113', '\x5', '\xE', '\b', '\x2', '\x113', 
		'\x114', '\b', '\a', '\x1', '\x2', '\x114', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x115', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\xCA', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\x115', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x115', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\x115', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\xDE', '\x3', '\x2', '\x2', '\x2', '\x115', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\x115', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x115', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x110', '\x3', '\x2', '\x2', '\x2', '\x116', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\f', '\x18', '\x2', '\x2', '\x118', 
		'\x119', '\a', '\x10', '\x2', '\x2', '\x119', '\x11A', '\a', '\x11', '\x2', 
		'\x2', '\x11A', '\x11B', '\x5', '>', ' ', '\x2', '\x11B', '\x11C', '\a', 
		'\x12', '\x2', '\x2', '\x11C', '\x11D', '\b', '\a', '\x1', '\x2', '\x11D', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\f', '\x17', '\x2', 
		'\x2', '\x11F', '\x120', '\a', '\x10', '\x2', '\x2', '\x120', '\x121', 
		'\a', ',', '\x2', '\x2', '\x121', '\x129', '\b', '\a', '\x1', '\x2', '\x122', 
		'\x123', '\f', '\x16', '\x2', '\x2', '\x123', '\x124', '\a', '\x13', '\x2', 
		'\x2', '\x124', '\x125', '\x5', '$', '\x13', '\x2', '\x125', '\x126', 
		'\a', '\x14', '\x2', '\x2', '\x126', '\x127', '\b', '\a', '\x1', '\x2', 
		'\x127', '\x129', '\x3', '\x2', '\x2', '\x2', '\x128', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x12B', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x12C', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x5', 
		'\x10', '\t', '\x2', '\x12E', '\x12F', '\x5', '>', ' ', '\x2', '\x12F', 
		'\x130', '\x5', '\x10', '\t', '\x2', '\x130', '\x131', '\b', '\b', '\x1', 
		'\x2', '\x131', '\xF', '\x3', '\x2', '\x2', '\x2', '\x132', '\x136', '\b', 
		'\t', '\x1', '\x2', '\x133', '\x134', '\a', '.', '\x2', '\x2', '\x134', 
		'\x136', '\b', '\t', '\x1', '\x2', '\x135', '\x132', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x133', '\x3', '\x2', '\x2', '\x2', '\x136', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x13C', '\b', '\n', '\x1', '\x2', 
		'\x138', '\x139', '\x5', '\x14', '\v', '\x2', '\x139', '\x13A', '\b', 
		'\n', '\x1', '\x2', '\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', 
		'\b', '\v', '\x1', '\x2', '\x13E', '\x13F', '\x5', 'R', '*', '\x2', '\x13F', 
		'\x140', '\b', '\v', '\x1', '\x2', '\x140', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\f', '\x3', '\x2', '\x2', '\x142', '\x143', 
		'\a', '\xF', '\x2', '\x2', '\x143', '\x144', '\x5', 'R', '*', '\x2', '\x144', 
		'\x145', '\b', '\v', '\x1', '\x2', '\x145', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x141', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x149', '\x3', '\x2', '\x2', '\x2', '\x149', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x150', '\b', '\f', '\x1', '\x2', '\x14C', '\x14D', '\x5', '\x18', '\r', 
		'\x2', '\x14D', '\x14E', '\b', '\f', '\x1', '\x2', '\x14E', '\x150', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14F', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x150', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x152', '\a', '\x1B', '\x2', '\x2', '\x152', '\x153', 
		'\x5', '\x44', '#', '\x2', '\x153', '\x154', '\b', '\r', '\x1', '\x2', 
		'\x154', '\x19', '\x3', '\x2', '\x2', '\x2', '\x155', '\x15A', '\b', '\xE', 
		'\x1', '\x2', '\x156', '\x157', '\x5', '\x1C', '\xF', '\x2', '\x157', 
		'\x158', '\b', '\xE', '\x1', '\x2', '\x158', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x155', '\x3', '\x2', '\x2', '\x2', '\x159', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\b', '\xF', '\x1', '\x2', '\x15C', '\x15D', '\x5', 
		'\x1E', '\x10', '\x2', '\x15D', '\x15E', '\b', '\xF', '\x1', '\x2', '\x15E', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\f', '\x3', '\x2', 
		'\x2', '\x160', '\x161', '\x5', '\x1E', '\x10', '\x2', '\x161', '\x162', 
		'\b', '\xF', '\x1', '\x2', '\x162', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x164', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', '\x165', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x166', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '\x165', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\a', '\x1C', '\x2', '\x2', '\x169', '\x16A', '\x5', 'T', '+', '\x2', 
		'\x16A', '\x16B', '\b', '\x10', '\x1', '\x2', '\x16B', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16D', '\x5', '\x10', '\t', '\x2', '\x16D', 
		'\x16E', '\x5', '\"', '\x12', '\x2', '\x16E', '\x16F', '\b', '\x11', '\x1', 
		'\x2', '\x16F', '!', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\b', 
		'\x12', '\x1', '\x2', '\x171', '\x172', '\x5', '(', '\x15', '\x2', '\x172', 
		'\x173', '\b', '\x12', '\x1', '\x2', '\x173', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x174', '\x176', '\b', '\x12', '\x1', '\x2', '\x175', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x174', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x187', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\f', 
		'\a', '\x2', '\x2', '\x178', '\x179', '\a', '.', '\x2', '\x2', '\x179', 
		'\x186', '\b', '\x12', '\x1', '\x2', '\x17A', '\x17B', '\f', '\x6', '\x2', 
		'\x2', '\x17B', '\x17C', '\a', '\xF', '\x2', '\x2', '\x17C', '\x17D', 
		'\a', '.', '\x2', '\x2', '\x17D', '\x17E', '\x5', '(', '\x15', '\x2', 
		'\x17E', '\x17F', '\b', '\x12', '\x1', '\x2', '\x17F', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x180', '\x181', '\f', '\x5', '\x2', '\x2', '\x181', 
		'\x182', '\a', '\xF', '\x2', '\x2', '\x182', '\x183', '\x5', '(', '\x15', 
		'\x2', '\x183', '\x184', '\b', '\x12', '\x1', '\x2', '\x184', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x185', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x189', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '#', '\x3', '\x2', '\x2', '\x2', '\x189', '\x187', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18B', '\x5', '\x10', '\t', '\x2', '\x18B', 
		'\x18C', '\x5', '&', '\x14', '\x2', '\x18C', '\x18D', '\b', '\x13', '\x1', 
		'\x2', '\x18D', '%', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\b', 
		'\x14', '\x1', '\x2', '\x18F', '\x190', '\x5', '>', ' ', '\x2', '\x190', 
		'\x191', '\b', '\x14', '\x1', '\x2', '\x191', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x194', '\b', '\x14', '\x1', '\x2', '\x193', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\f', 
		'\a', '\x2', '\x2', '\x196', '\x197', '\a', '.', '\x2', '\x2', '\x197', 
		'\x1A4', '\b', '\x14', '\x1', '\x2', '\x198', '\x199', '\f', '\x6', '\x2', 
		'\x2', '\x199', '\x19A', '\a', '\xF', '\x2', '\x2', '\x19A', '\x19B', 
		'\a', '.', '\x2', '\x2', '\x19B', '\x19C', '\x5', '>', ' ', '\x2', '\x19C', 
		'\x19D', '\b', '\x14', '\x1', '\x2', '\x19D', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19F', '\f', '\x5', '\x2', '\x2', '\x19F', '\x1A0', 
		'\a', '\xF', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '>', ' ', '\x2', '\x1A1', 
		'\x1A2', '\b', '\x14', '\x1', '\x2', '\x1A2', '\x1A4', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x195', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A8', '\x1A9', '\x5', '>', ' ', '\x2', '\x1A9', '\x1AA', '\x5', 
		'*', '\x16', '\x2', '\x1AA', '\x1AB', '\x5', '>', ' ', '\x2', '\x1AB', 
		'\x1AC', '\b', '\x15', '\x1', '\x2', '\x1AC', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x1AD', '\x1AE', '\x5', '\x10', '\t', '\x2', '\x1AE', '\x1AF', 
		'\a', '\x1D', '\x2', '\x2', '\x1AF', '\x1B0', '\x5', '\x10', '\t', '\x2', 
		'\x1B0', '\x1B1', '\b', '\x16', '\x1', '\x2', '\x1B1', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2', '\x1B3', '\a', '\xF', '\x2', '\x2', '\x1B3', '\x1B6', 
		'\b', '\x17', '\x1', '\x2', '\x1B4', '\x1B6', '\b', '\x17', '\x1', '\x2', 
		'\x1B5', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B4', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '-', '\x3', '\x2', '\x2', '\x2', '\x1B7', 
		'\x1B8', '\x5', '\x30', '\x19', '\x2', '\x1B8', '\x1B9', '\b', '\x18', 
		'\x1', '\x2', '\x1B9', '/', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', 
		'\b', '\x19', '\x1', '\x2', '\x1BB', '\x1BC', '\x5', '\f', '\a', '\x2', 
		'\x1BC', '\x1BD', '\b', '\x19', '\x1', '\x2', '\x1BD', '\x1C5', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\f', '\x3', '\x2', '\x2', '\x1BF', 
		'\x1C0', '\x5', '\x36', '\x1C', '\x2', '\x1C0', '\x1C1', '\x5', '\f', 
		'\a', '\x2', '\x1C1', '\x1C2', '\b', '\x19', '\x1', '\x2', '\x1C2', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C8', '\x1C9', '\x5', 'J', '&', '\x2', '\x1C9', '\x1CA', '\x5', 
		'\x34', '\x1B', '\x2', '\x1CA', '\x1CB', '\a', '\x6', '\x2', '\x2', '\x1CB', 
		'\x1CC', '\x5', '>', ' ', '\x2', '\x1CC', '\x1CD', '\b', '\x1A', '\x1', 
		'\x2', '\x1CD', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\a', '%', '\x2', '\x2', '\x1CF', '\x1D3', '\b', '\x1B', '\x1', '\x2', 
		'\x1D0', '\x1D1', '\a', '\x16', '\x2', '\x2', '\x1D1', '\x1D3', '\b', 
		'\x1B', '\x1', '\x2', '\x1D2', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\a', '%', '\x2', '\x2', '\x1D5', '\x1DE', '\b', 
		'\x1C', '\x1', '\x2', '\x1D6', '\x1D7', '\a', '\x1E', '\x2', '\x2', '\x1D7', 
		'\x1D8', '\a', '\n', '\x2', '\x2', '\x1D8', '\x1DE', '\b', '\x1C', '\x1', 
		'\x2', '\x1D9', '\x1DA', '\a', '\n', '\x2', '\x2', '\x1DA', '\x1DE', '\b', 
		'\x1C', '\x1', '\x2', '\x1DB', '\x1DC', '\a', '\x16', '\x2', '\x2', '\x1DC', 
		'\x1DE', '\b', '\x1C', '\x1', '\x2', '\x1DD', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', '\x1E', 
		'\x2', '\x2', '\x1E0', '\x1E1', '\x5', '.', '\x18', '\x2', '\x1E1', '\x1E2', 
		'\b', '\x1D', '\x1', '\x2', '\x1E2', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x5', '.', '\x18', '\x2', '\x1E4', '\x1E5', '\b', '\x1D', 
		'\x1', '\x2', '\x1E5', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1E7', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E9', '\b', '\x1E', 
		'\x1', '\x2', '\x1E9', '\x1EA', '\x5', '\x38', '\x1D', '\x2', '\x1EA', 
		'\x1EB', '\b', '\x1E', '\x1', '\x2', '\x1EB', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\f', '\x4', '\x2', '\x2', '\x1ED', '\x1EE', 
		'\a', '\x1F', '\x2', '\x2', '\x1EE', '\x1EF', '\x5', '\x38', '\x1D', '\x2', 
		'\x1EF', '\x1F0', '\b', '\x1E', '\x1', '\x2', '\x1F0', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1F2', 
		'\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F1', '\x3', '\x2', '\x2', 
		'\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F4', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x1F7', '\b', '\x1F', '\x1', '\x2', '\x1F7', '\x1F8', '\x5', ':', '\x1E', 
		'\x2', '\x1F8', '\x1F9', '\b', '\x1F', '\x1', '\x2', '\x1F9', '\x201', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\f', '\x4', '\x2', '\x2', 
		'\x1FB', '\x1FC', '\a', ' ', '\x2', '\x2', '\x1FC', '\x1FD', '\x5', ':', 
		'\x1E', '\x2', '\x1FD', '\x1FE', '\b', '\x1F', '\x1', '\x2', '\x1FE', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FA', '\x3', '\x2', '\x2', 
		'\x2', '\x200', '\x203', '\x3', '\x2', '\x2', '\x2', '\x201', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x202', '\x3', '\x2', '\x2', '\x2', 
		'\x202', '=', '\x3', '\x2', '\x2', '\x2', '\x203', '\x201', '\x3', '\x2', 
		'\x2', '\x2', '\x204', '\x205', '\x5', '@', '!', '\x2', '\x205', '\x206', 
		'\b', ' ', '\x1', '\x2', '\x206', '?', '\x3', '\x2', '\x2', '\x2', '\x207', 
		'\x208', '\b', '!', '\x1', '\x2', '\x208', '\x209', '\x5', '<', '\x1F', 
		'\x2', '\x209', '\x20A', '\b', '!', '\x1', '\x2', '\x20A', '\x212', '\x3', 
		'\x2', '\x2', '\x2', '\x20B', '\x20C', '\f', '\x3', '\x2', '\x2', '\x20C', 
		'\x20D', '\x5', '\x42', '\"', '\x2', '\x20D', '\x20E', '\x5', '<', '\x1F', 
		'\x2', '\x20E', '\x20F', '\b', '!', '\x1', '\x2', '\x20F', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x20B', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x212', '\x210', '\x3', '\x2', '\x2', 
		'\x2', '\x212', '\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x216', '\x5', '\x10', '\t', '\x2', '\x216', '\x217', '\a', 
		'!', '\x2', '\x2', '\x217', '\x218', '\x5', '\x10', '\t', '\x2', '\x218', 
		'\x219', '\b', '\"', '\x1', '\x2', '\x219', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\x21B', '\x5', '\x46', '$', '\x2', '\x21B', '\x21C', 
		'\b', '#', '\x1', '\x2', '\x21C', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x21D', '\x21E', '\b', '$', '\x1', '\x2', '\x21E', '\x21F', '\x5', '\x2', 
		'\x2', '\x2', '\x21F', '\x220', '\b', '$', '\x1', '\x2', '\x220', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x5', 'H', '%', '\x2', 
		'\x222', '\x223', '\b', '$', '\x1', '\x2', '\x223', '\x225', '\x3', '\x2', 
		'\x2', '\x2', '\x224', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x224', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x227', '\f', '\x6', '\x2', '\x2', '\x227', '\x228', '\x5', 
		'\x2', '\x2', '\x2', '\x228', '\x229', '\b', '$', '\x1', '\x2', '\x229', 
		'\x22F', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\f', '\x5', '\x2', 
		'\x2', '\x22B', '\x22C', '\x5', 'H', '%', '\x2', '\x22C', '\x22D', '\b', 
		'$', '\x1', '\x2', '\x22D', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x226', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x22F', '\x232', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\x3', '\x2', '\x2', '\x2', 
		'\x231', 'G', '\x3', '\x2', '\x2', '\x2', '\x232', '\x230', '\x3', '\x2', 
		'\x2', '\x2', '\x233', '\x234', '\a', '\"', '\x2', '\x2', '\x234', '\x238', 
		'\b', '%', '\x1', '\x2', '\x235', '\x236', '\a', '.', '\x2', '\x2', '\x236', 
		'\x238', '\b', '%', '\x1', '\x2', '\x237', '\x233', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x235', '\x3', '\x2', '\x2', '\x2', '\x238', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\a', ',', '\x2', '\x2', '\x23A', 
		'\x248', '\b', '&', '\x1', '\x2', '\x23B', '\x23C', '\x5', '\f', '\a', 
		'\x2', '\x23C', '\x23D', '\a', '\x10', '\x2', '\x2', '\x23D', '\x23E', 
		'\a', '\x11', '\x2', '\x2', '\x23E', '\x23F', '\x5', '>', ' ', '\x2', 
		'\x23F', '\x240', '\a', '\x12', '\x2', '\x2', '\x240', '\x241', '\b', 
		'&', '\x1', '\x2', '\x241', '\x248', '\x3', '\x2', '\x2', '\x2', '\x242', 
		'\x243', '\x5', '\f', '\a', '\x2', '\x243', '\x244', '\a', '\x10', '\x2', 
		'\x2', '\x244', '\x245', '\a', ',', '\x2', '\x2', '\x245', '\x246', '\b', 
		'&', '\x1', '\x2', '\x246', '\x248', '\x3', '\x2', '\x2', '\x2', '\x247', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x247', '\x23B', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x242', '\x3', '\x2', '\x2', '\x2', '\x248', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x249', '\x24A', '\x5', '\x10', '\t', '\x2', '\x24A', 
		'\x24B', '\a', '\xE', '\x2', '\x2', '\x24B', '\x24C', '\b', '\'', '\x1', 
		'\x2', '\x24C', 'M', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\x5', 
		'\x10', '\t', '\x2', '\x24E', '\x24F', '\a', '#', '\x2', '\x2', '\x24F', 
		'\x250', '\b', '(', '\x1', '\x2', '\x250', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x252', '\x5', 'L', '\'', '\x2', '\x252', '\x253', '\x5', '\x44', 
		'#', '\x2', '\x253', '\x254', '\b', ')', '\x1', '\x2', '\x254', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x255', '\x256', '\a', ',', '\x2', '\x2', '\x256', 
		'\x257', '\b', '*', '\x1', '\x2', '\x257', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x259', '\x5', '>', ' ', '\x2', '\x259', '\x25A', '\x5', 'V', 
		',', '\x2', '\x25A', '\x25B', '\b', '+', '\x1', '\x2', '\x25B', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x25D', '\x5', 'N', '(', '\x2', '\x25D', 
		'\x25E', '\x5', '\x44', '#', '\x2', '\x25E', '\x25F', '\b', ',', '\x1', 
		'\x2', '\x25F', 'W', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\b', 
		'-', '\x1', '\x2', '\x261', '\x262', '\b', '-', '\x1', '\x2', '\x262', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x263', '\x264', '\f', '\x3', '\x2', 
		'\x2', '\x264', '\x265', '\x5', 'J', '&', '\x2', '\x265', '\x266', '\a', 
		'\x6', '\x2', '\x2', '\x266', '\x267', '\b', '-', '\x1', '\x2', '\x267', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x268', '\x263', '\x3', '\x2', '\x2', 
		'\x2', '\x269', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x268', 
		'\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\x26B', 'Y', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26A', '\x3', '\x2', 
		'\x2', '\x2', '\x26D', '\x26E', '\x5', '\x10', '\t', '\x2', '\x26E', '\x26F', 
		'\x5', '\\', '/', '\x2', '\x26F', '\x270', '\x5', '\x10', '\t', '\x2', 
		'\x270', '\x271', '\a', '\x2', '\x2', '\x3', '\x271', '\x272', '\b', '.', 
		'\x1', '\x2', '\x272', '[', '\x3', '\x2', '\x2', '\x2', '\x273', '\x278', 
		'\b', '/', '\x1', '\x2', '\x274', '\x275', '\x5', '^', '\x30', '\x2', 
		'\x275', '\x276', '\b', '/', '\x1', '\x2', '\x276', '\x278', '\x3', '\x2', 
		'\x2', '\x2', '\x277', '\x273', '\x3', '\x2', '\x2', '\x2', '\x277', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x278', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x279', '\x27A', '\b', '\x30', '\x1', '\x2', '\x27A', '\x27B', '\x5', 
		'\x2', '\x2', '\x2', '\x27B', '\x27C', '\b', '\x30', '\x1', '\x2', '\x27C', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', '\f', '\x3', '\x2', 
		'\x2', '\x27E', '\x27F', '\a', '.', '\x2', '\x2', '\x27F', '\x280', '\x5', 
		'\x2', '\x2', '\x2', '\x280', '\x281', '\b', '\x30', '\x1', '\x2', '\x281', 
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x282', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x286', '\x3', '\x2', '\x2', '\x2', '\x284', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x284', '\x285', '\x3', '\x2', '\x2', '\x2', 
		'\x285', '_', '\x3', '\x2', '\x2', '\x2', '\x286', '\x284', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x8A', '\x92', '\x9B', '\x9D', '\xA8', '\xAE', '\xBB', 
		'\x115', '\x128', '\x12A', '\x135', '\x13B', '\x148', '\x14F', '\x159', 
		'\x165', '\x175', '\x185', '\x187', '\x193', '\x1A3', '\x1A5', '\x1B5', 
		'\x1C5', '\x1D2', '\x1DD', '\x1E6', '\x1F3', '\x201', '\x212', '\x224', 
		'\x22E', '\x230', '\x237', '\x247', '\x26A', '\x277', '\x284',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Ava.Frontend
